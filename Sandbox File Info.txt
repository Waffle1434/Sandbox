>Sandbox
Sandbox.sln
Sandbox.suo

>Sandbox

 >bin
  >Debug
   >Images (Tag names/Picture of Tag) (Will be making new images) (Make a tag name extracting dump box script?)
   >Plugins (All .map .xml files/Xbox 360 & PC) (24 Xbox 360 Maps) (3 New PC Maps) (PC .map .xml includes s3d_edge, s3d_turf, and s3d_waterfall) (Xbox 360 PC file transfer objects only work for multiplayer object properties) (make a standard default list for each .map to pick from for each .map in teh .xml)
    armory.xml
    bunkerworld.xml
    chill.xml
    chillout.xml
    construct.xml
    cyberdyne.xml
    deadlock.xml
    descent.xml
    docks.xml
    fortress.xml
    ghosttown.xml
    guardian.xml
    isolation.xml
    lockout.xml
    midship.xml
    riverworld.xml
    s3d_edge.xml
    s3d_turf.xml
    s3d_waterfall.xml
    salvation.xml
    sandbox.xml
    shrine.xml
    sidewinder.xml
    snowbound.xml
    spacecamp.xml
    warehouse.xml
    zanzibar.xml
   AppSettings.dat
    {®Gáz„?Tyson%C:\Users\Tyson\Documents\Halo 3\Maps\
   Sandbox.exe
   Sandbox.pdb
   Sandbox.vshost.exe
  >Release
   >Images (Tag names/Picture of Tag)
   AppSettings.dat
    {®Gáz„?Tyson%C:\Users\Tyson\Documents\Halo 3\Maps\
   Sandbox.exe
   Sandbox.pdb
   Sandbox.vshost.exe
   Sandbox.vshost.exe.manifest

 >Controls
----------------------------------------------------------------------------------------------------
  IdentSwapDialog.cs
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Sandbox.Plugins;

namespace Sandbox.Controls
{
    public partial class IdentSwapDialog : Form
    {
        private int ident;

        public IdentSwapDialog() 
        {
            InitializeComponent();

            comboBox1.Text = "null";
            comboBox2.Text = "null";
            
            //Load list of tag classes
            Load_Tag_Class_List();
        }

        public IdentSwapDialog(string tagname)
        {
            InitializeComponent();

            Ident = tagname;

            if (ident!= -1)
            {                
                foreach (MapPlugin.Tag t in GlobalVariables.Plugin.Tags)
                {
                    if (t.Ident == ident)
                    {
                        comboBox1.Text = t.Type;
                        comboBox2.Text = t.Filename;
                    }
                }
                Load_Tag_List(comboBox1.Text);
            }
            else
            {
                //If Ident is NULL set control values to NULL
                comboBox1.Text = "null";
                comboBox2.Text = "null";
            }
            //Load list of tag classes
            Load_Tag_Class_List();  
        }

        public string SwapButtonText
        {
            get
            {
                return this.btnSwap.Text;
            }
            set
            {
                this.btnSwap.Text = value;
            }
        }

        public string Ident
        {
            get { return GlobalVariables.Plugin.GetTagNameFromID(ident); }
            set { ident = GlobalVariables.Plugin.GetIDFromTagName(value); }
        }
        /// <summary>
        /// Load tag list a tag names for selected tag type
        /// </summary>
        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            Load_Tag_List(comboBox1.Items[comboBox1.SelectedIndex].ToString());
        }
        /// <summary>
        /// Loads a list of Tag classes into the control
        /// </summary>
        public void Load_Tag_Class_List()
        {
            comboBox1.Items.Clear();
            for (int i = 0; i < GlobalVariables.Plugin.TagClasses.Count; i++)
            {
                comboBox1.Items.Add(GlobalVariables.Plugin.TagClasses[i]);
            }
        }
        /// <summary>
        /// Loads a list of Tag names into the control
        /// </summary>
        /// <param name="type"></param>
        public void Load_Tag_List(string type)
        {
            comboBox2.Items.Clear();
            for (int i = 0; i < GlobalVariables.Plugin.Tags.Count; i++)
            {
                if (type == GlobalVariables.Plugin.Tags[i].Type)
                {
                    comboBox2.Items.Add(GlobalVariables.Plugin.Tags[i].Filename);
                }
            }
        }
        private void btnSwap_Click(object sender, EventArgs e)
        {
            Ident = comboBox2.Text;
            this.DialogResult = DialogResult.OK;
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.Cancel;
        }
    }
}

----------------------------------------------------------------------------------------------------
  IdentSwapDialog.Designer.cs
namespace Sandbox.Controls
{
    partial class IdentSwapDialog
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.label1 = new System.Windows.Forms.Label();
            this.btnSwap = new System.Windows.Forms.Button();
            this.comboBox1 = new System.Windows.Forms.ComboBox();
            this.label2 = new System.Windows.Forms.Label();
            this.comboBox2 = new System.Windows.Forms.ComboBox();
            this.btnCancel = new System.Windows.Forms.Button();
            this.SuspendLayout();
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(12, 21);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(32, 13);
            this.label1.TabIndex = 0;
            this.label1.Text = "Class";
            // 
            // btnSwap
            // 
            this.btnSwap.Location = new System.Drawing.Point(258, 46);
            this.btnSwap.Name = "btnSwap";
            this.btnSwap.Size = new System.Drawing.Size(75, 23);
            this.btnSwap.TabIndex = 2;
            this.btnSwap.Text = "Swap";
            this.btnSwap.UseVisualStyleBackColor = true;
            this.btnSwap.Click += new System.EventHandler(this.btnSwap_Click);
            // 
            // comboBox1
            // 
            this.comboBox1.FormattingEnabled = true;
            this.comboBox1.Location = new System.Drawing.Point(50, 18);
            this.comboBox1.Name = "comboBox1";
            this.comboBox1.Size = new System.Drawing.Size(55, 21);
            this.comboBox1.TabIndex = 3;
            this.comboBox1.SelectedIndexChanged += new System.EventHandler(this.comboBox1_SelectedIndexChanged);
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(120, 21);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(35, 13);
            this.label2.TabIndex = 4;
            this.label2.Text = "Name";
            // 
            // comboBox2
            // 
            this.comboBox2.FormattingEnabled = true;
            this.comboBox2.Location = new System.Drawing.Point(161, 18);
            this.comboBox2.Name = "comboBox2";
            this.comboBox2.Size = new System.Drawing.Size(253, 21);
            this.comboBox2.TabIndex = 5;
            // 
            // btnCancel
            // 
            this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btnCancel.Location = new System.Drawing.Point(339, 46);
            this.btnCancel.Name = "btnCancel";
            this.btnCancel.Size = new System.Drawing.Size(75, 23);
            this.btnCancel.TabIndex = 6;
            this.btnCancel.Text = "Cancel";
            this.btnCancel.UseVisualStyleBackColor = true;
            this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
            // 
            // IdentSwapDialog
            // 
            this.AcceptButton = this.btnSwap;
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.CancelButton = this.btnCancel;
            this.ClientSize = new System.Drawing.Size(426, 81);
            this.Controls.Add(this.btnCancel);
            this.Controls.Add(this.comboBox2);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.comboBox1);
            this.Controls.Add(this.btnSwap);
            this.Controls.Add(this.label1);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.HelpButton = true;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "IdentSwapDialog";
            this.ShowIcon = false;
            this.ShowInTaskbar = false;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
            this.Text = "Choose new ident...";
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Button btnSwap;
        private System.Windows.Forms.ComboBox comboBox1;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.ComboBox comboBox2;
        private System.Windows.Forms.Button btnCancel;
    }
}

----------------------------------------------------------------------------------------------------
  IdentSwapDialog.resx (Micrsoft .NET Managed Resource File)
----------------------------------------------------------------------------------------------------
  Info.cs
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Sandbox.Usermap;

namespace Sandbox.Controls
{
    public partial class Info : Form
    {
        private static Info info;

        public Info(int index)
        {
            InitializeComponent();
            textBox1.Text = index.ToString();
            textBox2.Text = "0x" + (632 + (index * 84)).ToString("X");
            int tagindex = GlobalVariables.Usermap.placementBlocks[index].TagIndex;
            textBox3.Text = tagindex.ToString();
            textBox4.Text = "0x" + (54420 + (tagindex * 12)).ToString("X");
            pictureBox1.Image = Misc.GetImagesFromID(GlobalVariables.Usermap.tagIndex[tagindex].ident);
        }

        public static void Show(int index)
        {
            info = new Info(index);
            info.ShowDialog();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.OK;
        }
    }
}

----------------------------------------------------------------------------------------------------
  Info.Designer.cs
namespace Sandbox.Controls
{
    partial class Info
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.lblChunkNumber = new System.Windows.Forms.Label();
            this.lblOffsetInUsermap = new System.Windows.Forms.Label();
            this.lblIndex = new System.Windows.Forms.Label();
            this.lblIndexOffset = new System.Windows.Forms.Label();
            this.panel1 = new System.Windows.Forms.Panel();
            this.button1 = new System.Windows.Forms.Button();
            this.textBox1 = new System.Windows.Forms.TextBox();
            this.textBox2 = new System.Windows.Forms.TextBox();
            this.textBox3 = new System.Windows.Forms.TextBox();
            this.textBox4 = new System.Windows.Forms.TextBox();
            this.pictureBox1 = new System.Windows.Forms.PictureBox();
            this.panel1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).BeginInit();
            this.SuspendLayout();
            // 
            // lblChunkNumber
            // 
            this.lblChunkNumber.AutoSize = true;
            this.lblChunkNumber.Location = new System.Drawing.Point(13, 13);
            this.lblChunkNumber.Name = "lblChunkNumber";
            this.lblChunkNumber.Size = new System.Drawing.Size(103, 13);
            this.lblChunkNumber.TabIndex = 0;
            this.lblChunkNumber.Text = "Placement Block #: ";
            // 
            // lblOffsetInUsermap
            // 
            this.lblOffsetInUsermap.AutoSize = true;
            this.lblOffsetInUsermap.Location = new System.Drawing.Point(13, 36);
            this.lblOffsetInUsermap.Name = "lblOffsetInUsermap";
            this.lblOffsetInUsermap.Size = new System.Drawing.Size(97, 13);
            this.lblOffsetInUsermap.TabIndex = 1;
            this.lblOffsetInUsermap.Text = "Offset in Usermap: ";
            // 
            // lblIndex
            // 
            this.lblIndex.AutoSize = true;
            this.lblIndex.Location = new System.Drawing.Point(13, 59);
            this.lblIndex.Name = "lblIndex";
            this.lblIndex.Size = new System.Drawing.Size(66, 13);
            this.lblIndex.TabIndex = 2;
            this.lblIndex.Text = "Tags Index: ";
            // 
            // lblIndexOffset
            // 
            this.lblIndexOffset.AutoSize = true;
            this.lblIndexOffset.Location = new System.Drawing.Point(13, 82);
            this.lblIndexOffset.Name = "lblIndexOffset";
            this.lblIndexOffset.Size = new System.Drawing.Size(126, 13);
            this.lblIndexOffset.TabIndex = 3;
            this.lblIndexOffset.Text = "Index Offset in Usermap: ";
            // 
            // panel1
            // 
            this.panel1.BackColor = System.Drawing.SystemColors.ControlLightLight;
            this.panel1.Controls.Add(this.button1);
            this.panel1.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.panel1.Location = new System.Drawing.Point(0, 119);
            this.panel1.Name = "panel1";
            this.panel1.Size = new System.Drawing.Size(315, 36);
            this.panel1.TabIndex = 4;
            // 
            // button1
            // 
            this.button1.Location = new System.Drawing.Point(235, 7);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(75, 23);
            this.button1.TabIndex = 0;
            this.button1.Text = "OK";
            this.button1.UseVisualStyleBackColor = true;
            this.button1.Click += new System.EventHandler(this.button1_Click);
            // 
            // textBox1
            // 
            this.textBox1.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.textBox1.Location = new System.Drawing.Point(145, 13);
            this.textBox1.Name = "textBox1";
            this.textBox1.ReadOnly = true;
            this.textBox1.Size = new System.Drawing.Size(131, 13);
            this.textBox1.TabIndex = 5;
            // 
            // textBox2
            // 
            this.textBox2.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.textBox2.Location = new System.Drawing.Point(145, 36);
            this.textBox2.Name = "textBox2";
            this.textBox2.ReadOnly = true;
            this.textBox2.Size = new System.Drawing.Size(131, 13);
            this.textBox2.TabIndex = 6;
            // 
            // textBox3
            // 
            this.textBox3.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.textBox3.Location = new System.Drawing.Point(145, 59);
            this.textBox3.Name = "textBox3";
            this.textBox3.ReadOnly = true;
            this.textBox3.Size = new System.Drawing.Size(131, 13);
            this.textBox3.TabIndex = 7;
            // 
            // textBox4
            // 
            this.textBox4.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.textBox4.Location = new System.Drawing.Point(145, 82);
            this.textBox4.Name = "textBox4";
            this.textBox4.ReadOnly = true;
            this.textBox4.Size = new System.Drawing.Size(131, 13);
            this.textBox4.TabIndex = 8;
            // 
            // pictureBox1
            // 
            this.pictureBox1.Location = new System.Drawing.Point(210, 5);
            this.pictureBox1.Name = "pictureBox1";
            this.pictureBox1.Size = new System.Drawing.Size(100, 100);
            this.pictureBox1.TabIndex = 9;
            this.pictureBox1.TabStop = false;
            // 
            // Info
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(315, 155);
            this.Controls.Add(this.pictureBox1);
            this.Controls.Add(this.textBox4);
            this.Controls.Add(this.textBox3);
            this.Controls.Add(this.textBox2);
            this.Controls.Add(this.textBox1);
            this.Controls.Add(this.panel1);
            this.Controls.Add(this.lblIndexOffset);
            this.Controls.Add(this.lblIndex);
            this.Controls.Add(this.lblOffsetInUsermap);
            this.Controls.Add(this.lblChunkNumber);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "Info";
            this.ShowIcon = false;
            this.ShowInTaskbar = false;
            this.Text = "Slot Properties";
            this.panel1.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label lblChunkNumber;
        private System.Windows.Forms.Label lblOffsetInUsermap;
        private System.Windows.Forms.Label lblIndex;
        private System.Windows.Forms.Label lblIndexOffset;
        private System.Windows.Forms.Panel panel1;
        private System.Windows.Forms.Button button1;
        private System.Windows.Forms.TextBox textBox1;
        private System.Windows.Forms.TextBox textBox2;
        private System.Windows.Forms.TextBox textBox3;
        private System.Windows.Forms.TextBox textBox4;
        private System.Windows.Forms.PictureBox pictureBox1;
    }
}

----------------------------------------------------------------------------------------------------
  Info.resx (Micrsoft .NET Managed Resource File)
----------------------------------------------------------------------------------------------------
  ListpanelV2.cs
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Sandbox.Editor;
using Sandbox.Usermap;
using System.Reflection;
using Sandbox.Plugins;

namespace Sandbox.Controls
{
    /// <summary>
    /// Displays and allows editing of usermap data
    /// </summary>
    public partial class ListpanelV2 : UserControl
    {
        /// <summary>
        /// Creates new ListpanelV2 instance.
        /// </summary>
        public ListpanelV2()
        {
            //Initialize form components
            InitializeComponent();            
        }
        /// <summary>
        /// Load listview with usermaps data
        /// </summary>
        public void Populate()
        {
            //Clear anything that might be in the listview
            listView1.Items.Clear();
            listView1.LargeImageList = GlobalVariables.ImageIcons; //Set large icon list
            listView1.SmallImageList = GlobalVariables.SmallImageIcons; //Set small icon list
            if (placementBlocksToolStripMenuItem.Checked)
            {
                //For each placement block
                for (int i = 0; i < 640; i++)
                {
                    ListViewItem li = new ListViewItem(); //Create new listview item
                    int tIndex = GlobalVariables.Usermap.placementBlocks[i].TagIndex; //Get current blocks tag index
                    if (tIndex != -1) //If tag index is not null
                    {
                        li.Text = GlobalVariables.Plugin.GetTagNameFromID(GlobalVariables.Usermap.tagIndex[tIndex].ident); //Set list view items name to tag path
                        li.ImageKey = li.Text.Replace('\\', '_'); //Set image key               
                    }
                    else //If tag index is null
                    {
                        li.Text = "Empty"; //Lable listview item as "Empty"
                    }
                    //Set list view items to proper listview group
                    if (blockTypeToolStripMenuItem1.Checked)
                    {
                        switch (GlobalVariables.Usermap.placementBlocks[i].BlockType)
                        {
                            case H3Usermap.PlacementBlock.blockType.Reserved:
                            case H3Usermap.PlacementBlock.blockType.Original:
                            case H3Usermap.PlacementBlock.blockType.Added:
                            case H3Usermap.PlacementBlock.blockType.Edited:
                            case H3Usermap.PlacementBlock.blockType.Player_Spawn:
                            case H3Usermap.PlacementBlock.blockType.NULL:
                                li.Group = listView1.Groups[GlobalVariables.Usermap.placementBlocks[i].BlockType.ToString()];
                                break;
                            //In the rare case a placement block 
                            //does not fall into one of the above catagories
                            default:
                                li.Group = listView1.Groups["Unsorted"];
                                break;
                        }
                    }
                    else
                    {
                        if (tIndex != -1) //If tag index is not null
                            li.Group = listView1.Groups[GlobalVariables.Plugin.GetTagTypeFromID(
                                GlobalVariables.Usermap.tagIndex[tIndex].ident)];
                        else
                            li.Group = listView1.Groups["no class"];
                    }

                    li.SubItems.Add(i.ToString()); //Add placement blocks index as a subitem
                    li.Tag = i; //Set to tag index to we can get it later
                    if (txtSearch.Text.Equals("")) //If no search string was entered
                    {
                        if (CheckIfBlockIsShown(GlobalVariables.Usermap.placementBlocks[i].BlockType))
                            listView1.Items.Add(li); //Add item to list view
                    }
                    else //If a search string was entered
                    {
                        if (li.Text.Contains(txtSearch.Text)) //Check is items tag path contains the string
                        {
                            if (CheckIfBlockIsShown(GlobalVariables.Usermap.placementBlocks[i].BlockType))
                                listView1.Items.Add(li); //If it does, add the items to list view  
                        }
                    }
                }
            }
            else
            {
                //For each tag index entry
                for (int i = 0; i < 255; i++)
                {
                    ListViewItem li = new ListViewItem(); //Create new listview item
                    int ident = GlobalVariables.Usermap.tagIndex[i].ident;
                    if (ident != -1)
                    {
                        li.Text = GlobalVariables.Plugin.GetTagNameFromID(ident); //Set list view items name to tag path
                        li.ImageKey = li.Text.Replace('\\', '_'); //Set image key 
                    }
                    else
                    {
                        li.Text = "Null Entry";
                    }
                    li.SubItems.Add(i.ToString()); //Add tag entrys index as a subitem
                    li.Tag = i; //Set to index to we can get it later
                    if (txtSearch.Text.Equals("")) //If no search string was entered
                    {
                        listView1.Items.Add(li); //Add item to list view
                    }
                    else //If a search string was entered
                    {
                        if (li.Text.Contains(txtSearch.Text)) //Check is items tag path contains the string
                        {
                            listView1.Items.Add(li); //If it does, add the items to list view  
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Clears the listview
        /// </summary>
        public void Clear()
        {
            //Clear listview items
            listView1.Items.Clear();
        }
        /// <summary>
        /// Checks is a group type is set to be displayed
        ///  in the listview or not.
        /// </summary>
        /// <param name="type"></param>
        /// <returns></returns>
        public bool CheckIfBlockIsShown(H3Usermap.PlacementBlock.blockType type)
        {
            switch (type)
            {
                case H3Usermap.PlacementBlock.blockType.Reserved:
                    return reservedSlotsToolStripMenuItem.Checked;
                case H3Usermap.PlacementBlock.blockType.Original:
                    return originalSlotsToolStripMenuItem.Checked;
                case H3Usermap.PlacementBlock.blockType.Added:
                    return addedSlotsToolStripMenuItem.Checked;
                case H3Usermap.PlacementBlock.blockType.Edited:
                    return editedSlotsToolStripMenuItem.Checked;
                case H3Usermap.PlacementBlock.blockType.Player_Spawn:
                    return playerSpawnsToolStripMenuItem.Checked;
                case H3Usermap.PlacementBlock.blockType.NULL:
                    return emptySlotsToolStripMenuItem.Checked;
                //In the rare case a placement block 
                //does not fall into one of the above catagories
                default:
                    return unsortedSlotsToolStripMenuItem.Checked;
            }
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            //Determine view mode selected
            switch (comboBox1.Text)
            {
                case "Large Icons":
                    listView1.View = View.LargeIcon; //View = Large Icon
                    break;
                case "Small Icons":
                    listView1.View = View.SmallIcon; //View = Small Icon
                    break;
                case "List":
                    listView1.View = View.List; //View = List
                    break;
                case "Details":
                    listView1.View = View.Details; //View = Details
                    break;
                case "Tile":
                    listView1.View = View.Tile; //View = Tile
                    break;
            }
        }

        private void btnCopy_Click(object sender, EventArgs e)
        {
            //If a usermap is open
            if (GlobalVariables.Usermap != null)
            {
                if(placementBlocksToolStripMenuItem.Checked)
                    //Copy currently selected placement block to our clipboard
                    GlobalVariables.Clipboard = GlobalVariables.Usermap.placementBlocks[(int)listView1.SelectedItems[0].Tag];
                else
                    GlobalVariables.Clipboard = GlobalVariables.Usermap.tagIndex[(int)listView1.SelectedItems[0].Tag];
                    
            }
        }

        private void btnPaste_Click(object sender, EventArgs e)
        {
            //If a usermap is open
            if (GlobalVariables.Usermap != null && GlobalVariables.Clipboard != null)
            {
                if (placementBlocksToolStripMenuItem.Checked)
                    //Copy the clipboard to the currently selected placement block
                    GlobalVariables.Usermap.placementBlocks[(int)listView1.SelectedItems[0].Tag] = (H3Usermap.PlacementBlock)GlobalVariables.Clipboard;
                else
                    GlobalVariables.Usermap.tagIndex[(int)listView1.SelectedItems[0].Tag] = (H3Usermap.TagIndexEntry)GlobalVariables.Clipboard;
                pe_FormClosing(null, null);
            }
        }

        private void btnEdit_Click(object sender, EventArgs e)
        {
            //If a usermap is open
            if (GlobalVariables.Usermap != null)
            {
                //Create new instance of our property editor
                // and pass it the currently selected object.
                PropertyEditor pe;
                if (placementBlocksToolStripMenuItem.Checked)
                    pe = new PropertyEditor(GlobalVariables.Usermap.placementBlocks[(int)listView1.SelectedItems[0].Tag]);
                else
                    pe = new PropertyEditor(GlobalVariables.Usermap.tagIndex[(int)listView1.SelectedItems[0].Tag]);
                pe.FormClosing += new FormClosingEventHandler(pe_FormClosing);
                pe.ShowDialog(); //Show property editor
            }
        }

        private void btnSwap_Click(object sender, EventArgs e)
        {
            //If a usermap is open
            if (GlobalVariables.Usermap != null)
            {
                //Get the tag index of the currently selected placement block
                int index = GlobalVariables.Usermap.placementBlocks[(int)listView1.SelectedItems[0].Tag].TagIndex;
                if (index != -1) //If placement block is not null
                {
                    //Create new instance of our property editor
                    // and pass it the currently selected placement blocks
                    //  tag index.
                    PropertyEditor pe = new PropertyEditor(GlobalVariables.Usermap.tagIndex[index]);
                    //Set our custom form closing event.
                    pe.FormClosing += new FormClosingEventHandler(pe_FormClosing);
                    pe.ShowDialog(); //Show property editor 
                }
                else //If placement block is null
                {

                }
            }
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            //If a usermap is open
            if (GlobalVariables.Usermap != null)
            {
                if (placementBlocksToolStripMenuItem.Checked)
                {
                    //Create a new placement block
                    H3Usermap.PlacementBlock nullBlock = new H3Usermap.PlacementBlock();
                    nullBlock.LoadNull(); //Load with null values
                    //Set the currently selected placement block
                    // to the null block we created.
                    GlobalVariables.Usermap.placementBlocks[(int)listView1.SelectedItems[0].Tag] = nullBlock;
                    //Update listview item to show as empty
                    listView1.SelectedItems[0].Text = "Empty";
                    listView1.SelectedItems[0].ImageKey = "Null";
                }
                else
                {
                    H3Usermap.TagIndexEntry nullEntry = new H3Usermap.TagIndexEntry();
                    nullEntry.LoadNull();
                    GlobalVariables.Usermap.tagIndex[(int)listView1.SelectedItems[0].Tag] = nullEntry;
                    listView1.SelectedItems[0].Text = "Null Entry";
                    listView1.SelectedItems[0].ImageKey = "";
                }
            }
        }
        /// <summary>
        /// Updates a listview item after a property 
        ///  editor is closed.
        /// </summary>
        void pe_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (placementBlocksToolStripMenuItem.Checked)
            {
                //Get the tag index of the currently selected placement block
                int tIndex = GlobalVariables.Usermap.placementBlocks[(int)listView1.SelectedItems[0].Tag].TagIndex;
                if (tIndex != -1) //If index is not null
                {
                    //Update listview item
                    listView1.SelectedItems[0].Text = GlobalVariables.Plugin.GetTagNameFromID(GlobalVariables.Usermap.tagIndex[tIndex].ident);
                    listView1.SelectedItems[0].ImageKey = listView1.SelectedItems[0].Text.Replace('\\', '_');
                }
                else //If index is null
                {
                    //Update listview item
                    listView1.SelectedItems[0].Text = "Empty";
                    listView1.SelectedItems[0].ImageKey = "Empty";
                }
                listView1.SelectedItems[0].Group = listView1.Groups[GlobalVariables.Usermap.placementBlocks[(int)listView1.SelectedItems[0].Tag].BlockType.ToString()];
                listView1.SelectedItems[0].EnsureVisible();
            }
            else
            {
                int ident = GlobalVariables.Usermap.tagIndex[(int)listView1.SelectedItems[0].Tag].ident;
                if (ident != -1)
                {
                    listView1.SelectedItems[0].Text = GlobalVariables.Plugin.GetTagNameFromID(ident);
                    listView1.SelectedItems[0].ImageKey = listView1.SelectedItems[0].Text.Replace('\\', '_');
                }
                else
                {
                    listView1.SelectedItems[0].Text = "Null Entry";
                    listView1.SelectedItems[0].ImageKey = "";
                }
            }
        }

        private void txtSearch_TextChanged(object sender, EventArgs e)
        {
            //If a usermap is open
            if (GlobalVariables.Usermap != null)
            {
                if (nameToolStripMenuItem.Checked == true)
                {
                    //Hide listview to speed up repopulation
                    listView1.Hide();
                    //Repopulate the listview.
                    Populate();
                    //Show the listview
                    listView1.Show();
                }
                else
                {
                    int sNum = 0;
                    if(int.TryParse(txtSearch.Text, out sNum))
                    {
                        if(sNum >=0 && sNum <=639)
                            listView1.Items[sNum].EnsureVisible();
                    }
                }
            }
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            //If a usermap is open
            if (GlobalVariables.Usermap != null)
            {
                //Recalculate spawned object count
                byte objCount = (byte)GlobalVariables.Usermap.baseObjectCount;
                for (int i = 0; i < 640; i++)
                {
                    if (GlobalVariables.Usermap.placementBlocks[i].BlockType != H3Usermap.PlacementBlock.blockType.NULL)
                        objCount++;
                }
                //Set new object count
                GlobalVariables.Usermap.unamedBlock1.Spawned_Object_Count = objCount;
                //Write changes
                int error = GlobalVariables.Usermap.Write();
                //Show error message
                if (error == 0)
                {
                    SuccessMessage sm = new SuccessMessage("Changes saved.");
                    sm.ShowDialog();
                }
                else
                {
                    MessageBox.Show("Changes were not saved.", "Error");
                }
            }
        }

        private void listView1_MouseDown(object sender, MouseEventArgs e)
        {
            //If right mouse button was clicked
            if (e.Button == MouseButtons.Right)
            {
                //Test where the mouse was clicked
                ListViewHitTestInfo hitTestInfo = listView1.HitTest(e.X, e.Y);
                //If clicked area was not empty
                if (hitTestInfo.Item != null)
                {
                    //show the context menu strip
                    cmsOptions.Show(this, e.X, e.Y + 30);
                }
            }
        }

        private void propertiesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //Create new info form and display
            // info of currently selected placement block.
            Info.Show((int)listView1.SelectedItems[0].Tag);
        }

        private void nameToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (GlobalVariables.Usermap != null)
            {
                indexToolStripMenuItem.Checked = !nameToolStripMenuItem.Checked;
                txtSearch.Text = "";
                listView1.Hide();
                Populate();
                listView1.Show();
            }
            else
                nameToolStripMenuItem.Checked = true;
        }

        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (GlobalVariables.Usermap != null)
            {
                nameToolStripMenuItem.Checked = !indexToolStripMenuItem.Checked;
                txtSearch.Text = "";
                listView1.Hide();
                Populate();
                listView1.Show();
            }
            else
                indexToolStripMenuItem.Checked = false;
        }

        public void GroupItems()
        {
            if (blockTypeToolStripMenuItem1.Checked)
            {
                listView1.ShowGroups = true;
                listView1.Groups.Clear();
                listView1.Groups.Add("Reserved", "Reserved Slots");
                listView1.Groups.Add("Original", "Original Slots");
                listView1.Groups.Add("Added", "Added Slots");
                listView1.Groups.Add("Edited", "Edited Slots");
                listView1.Groups.Add("Unsorted", "Unsorted Slots");
                listView1.Groups.Add("Player_Spawn", "Player Spawns");
                listView1.Groups.Add("NULL", "Empty Slots");
                Populate();
            }
            else if (tagTypeToolStripMenuItem1.Checked)
            {
                listView1.ShowGroups = true;
                listView1.Groups.Clear();
                foreach (string s in GlobalVariables.Plugin.TagClasses)
                    listView1.Groups.Add(s, s);
                listView1.Groups.Add("no class", "no class");
                Populate();
            }
            else if (noGroupingToolStripMenuItem.Checked)
            {
                listView1.ShowGroups = false;
                Populate();
            }
        }

        private void blockTypeToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            if (GlobalVariables.Usermap != null)
            {
                noGroupingToolStripMenuItem.Checked = false;
                tagTypeToolStripMenuItem1.Checked = false;
                blockTypeToolStripMenuItem1.Checked = true;
                GroupItems();
            }
            else
                blockTypeToolStripMenuItem1.Checked = true;
        }

        private void tagTypeToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            if (GlobalVariables.Usermap != null)
            {
                noGroupingToolStripMenuItem.Checked = false;
                blockTypeToolStripMenuItem1.Checked = false;
                tagTypeToolStripMenuItem1.Checked = true;
                GroupItems();
            }
            else
                tagTypeToolStripMenuItem1.Checked = false;
        }

        private void noGroupingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (GlobalVariables.Usermap != null)
            {
                blockTypeToolStripMenuItem1.Checked = false;
                tagTypeToolStripMenuItem1.Checked = false;
                noGroupingToolStripMenuItem.Checked = true;
                GroupItems();
            }
            else
                noGroupingToolStripMenuItem.Checked = false;
        }

        private void refreshToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (GlobalVariables.Usermap != null)
                Populate();
        }

        private void placementBlocksToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (GlobalVariables.Usermap != null)
            {
                tagIndexToolStripMenuItem.Checked = false;
                placementBlocksToolStripMenuItem.Checked = true;
                listView1.ShowGroups = !noGroupingToolStripMenuItem.Checked;
                viewByToolStripMenuItem.Enabled = true;
                groupByToolStripMenuItem1.Enabled = true;
                Populate();
            }
        }

        private void tagIndexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (GlobalVariables.Usermap != null)
            {
                placementBlocksToolStripMenuItem.Checked = false;
                tagIndexToolStripMenuItem.Checked = true;
                listView1.ShowGroups = false;
                viewByToolStripMenuItem.Enabled = false;
                groupByToolStripMenuItem1.Enabled = false;
                Populate();
            }
        }

        private void mapInformationToolStripMenuItem_Click(object sender, EventArgs e)
        {
            PropertyEditor pe = new PropertyEditor();
            pe.SelectedObject = GlobalVariables.Usermap.header;
            pe.ShowDialog();
        }
    }
}

----------------------------------------------------------------------------------------------------
  ListpanelV2.Designer.cs
namespace Sandbox.Controls
{
    partial class ListpanelV2
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ListpanelV2));
            System.Windows.Forms.ListViewGroup listViewGroup1 = new System.Windows.Forms.ListViewGroup("Reserved Slots", System.Windows.Forms.HorizontalAlignment.Center);
            System.Windows.Forms.ListViewGroup listViewGroup2 = new System.Windows.Forms.ListViewGroup("Original Slots", System.Windows.Forms.HorizontalAlignment.Center);
            System.Windows.Forms.ListViewGroup listViewGroup3 = new System.Windows.Forms.ListViewGroup("Added Slots", System.Windows.Forms.HorizontalAlignment.Center);
            System.Windows.Forms.ListViewGroup listViewGroup4 = new System.Windows.Forms.ListViewGroup("Edited Slots", System.Windows.Forms.HorizontalAlignment.Center);
            System.Windows.Forms.ListViewGroup listViewGroup5 = new System.Windows.Forms.ListViewGroup("Unsorted Slots", System.Windows.Forms.HorizontalAlignment.Center);
            System.Windows.Forms.ListViewGroup listViewGroup6 = new System.Windows.Forms.ListViewGroup("Player Spawns", System.Windows.Forms.HorizontalAlignment.Center);
            System.Windows.Forms.ListViewGroup listViewGroup7 = new System.Windows.Forms.ListViewGroup("Empty Slots", System.Windows.Forms.HorizontalAlignment.Center);
            this.panel1 = new System.Windows.Forms.Panel();
            this.btnSave = new System.Windows.Forms.Button();
            this.btnSwap = new System.Windows.Forms.Button();
            this.btnClear = new System.Windows.Forms.Button();
            this.btnPaste = new System.Windows.Forms.Button();
            this.btnCopy = new System.Windows.Forms.Button();
            this.btnEdit = new System.Windows.Forms.Button();
            this.comboBox1 = new System.Windows.Forms.ComboBox();
            this.txtSearch = new System.Windows.Forms.TextBox();
            this.cmsOptions = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.extractSlotToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.injectSlotToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
            this.propertiesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.pbxSearch = new System.Windows.Forms.PictureBox();
            this.cmsSearchOptions = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.nameToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.indexToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.pictureBox1 = new System.Windows.Forms.PictureBox();
            this.cmsWindowOptions = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.showToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.placementBlocksToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tagIndexToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.viewByToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.reservedSlotsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.originalSlotsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.addedSlotsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.editedSlotsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.unsortedSlotsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.emptySlotsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.playerSpawnsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.groupByToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.noGroupingToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator3 = new System.Windows.Forms.ToolStripSeparator();
            this.blockTypeToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.tagTypeToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator2 = new System.Windows.Forms.ToolStripSeparator();
            this.refreshWindowToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.mapInformationToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.listView1 = new Sandbox.Controls.ListViewEx();
            this.columnHeader1 = new System.Windows.Forms.ColumnHeader();
            this.columnHeader2 = new System.Windows.Forms.ColumnHeader();
            this.panel1.SuspendLayout();
            this.cmsOptions.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.pbxSearch)).BeginInit();
            this.cmsSearchOptions.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).BeginInit();
            this.cmsWindowOptions.SuspendLayout();
            this.SuspendLayout();
            // 
            // panel1
            // 
            this.panel1.Controls.Add(this.btnSave);
            this.panel1.Controls.Add(this.btnSwap);
            this.panel1.Controls.Add(this.btnClear);
            this.panel1.Controls.Add(this.btnPaste);
            this.panel1.Controls.Add(this.btnCopy);
            this.panel1.Controls.Add(this.btnEdit);
            this.panel1.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.panel1.Location = new System.Drawing.Point(0, 399);
            this.panel1.Name = "panel1";
            this.panel1.Size = new System.Drawing.Size(514, 52);
            this.panel1.TabIndex = 1;
            // 
            // btnSave
            // 
            this.btnSave.Image = ((System.Drawing.Image)(resources.GetObject("btnSave.Image")));
            this.btnSave.Location = new System.Drawing.Point(441, 9);
            this.btnSave.Name = "btnSave";
            this.btnSave.Size = new System.Drawing.Size(59, 34);
            this.btnSave.TabIndex = 8;
            this.btnSave.Text = "Save";
            this.btnSave.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
            this.btnSave.UseVisualStyleBackColor = false;
            this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
            // 
            // btnSwap
            // 
            this.btnSwap.Image = ((System.Drawing.Image)(resources.GetObject("btnSwap.Image")));
            this.btnSwap.Location = new System.Drawing.Point(276, 9);
            this.btnSwap.Name = "btnSwap";
            this.btnSwap.Size = new System.Drawing.Size(59, 34);
            this.btnSwap.TabIndex = 6;
            this.btnSwap.Text = "Swap";
            this.btnSwap.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
            this.btnSwap.UseVisualStyleBackColor = false;
            this.btnSwap.Visible = false;
            this.btnSwap.Click += new System.EventHandler(this.btnSwap_Click);
            // 
            // btnClear
            // 
            this.btnClear.Image = ((System.Drawing.Image)(resources.GetObject("btnClear.Image")));
            this.btnClear.Location = new System.Drawing.Point(211, 9);
            this.btnClear.Name = "btnClear";
            this.btnClear.Size = new System.Drawing.Size(59, 34);
            this.btnClear.TabIndex = 7;
            this.btnClear.Text = "Clear";
            this.btnClear.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
            this.btnClear.UseVisualStyleBackColor = false;
            this.btnClear.Click += new System.EventHandler(this.btnClear_Click);
            // 
            // btnPaste
            // 
            this.btnPaste.BackColor = System.Drawing.SystemColors.Control;
            this.btnPaste.Image = ((System.Drawing.Image)(resources.GetObject("btnPaste.Image")));
            this.btnPaste.Location = new System.Drawing.Point(81, 9);
            this.btnPaste.Name = "btnPaste";
            this.btnPaste.Size = new System.Drawing.Size(59, 34);
            this.btnPaste.TabIndex = 4;
            this.btnPaste.Text = "Paste";
            this.btnPaste.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
            this.btnPaste.UseVisualStyleBackColor = false;
            this.btnPaste.Click += new System.EventHandler(this.btnPaste_Click);
            // 
            // btnCopy
            // 
            this.btnCopy.Image = ((System.Drawing.Image)(resources.GetObject("btnCopy.Image")));
            this.btnCopy.ImageAlign = System.Drawing.ContentAlignment.MiddleLeft;
            this.btnCopy.Location = new System.Drawing.Point(16, 9);
            this.btnCopy.Name = "btnCopy";
            this.btnCopy.Size = new System.Drawing.Size(59, 34);
            this.btnCopy.TabIndex = 3;
            this.btnCopy.Text = "Copy";
            this.btnCopy.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
            this.btnCopy.UseVisualStyleBackColor = false;
            this.btnCopy.Click += new System.EventHandler(this.btnCopy_Click);
            // 
            // btnEdit
            // 
            this.btnEdit.Image = ((System.Drawing.Image)(resources.GetObject("btnEdit.Image")));
            this.btnEdit.Location = new System.Drawing.Point(146, 9);
            this.btnEdit.Name = "btnEdit";
            this.btnEdit.Size = new System.Drawing.Size(59, 34);
            this.btnEdit.TabIndex = 5;
            this.btnEdit.Text = "Edit";
            this.btnEdit.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
            this.btnEdit.UseVisualStyleBackColor = false;
            this.btnEdit.Click += new System.EventHandler(this.btnEdit_Click);
            // 
            // comboBox1
            // 
            this.comboBox1.FormattingEnabled = true;
            this.comboBox1.Items.AddRange(new object[] {
            "Large Icons",
            "Small Icons",
            "Details",
            "List",
            "Tile"});
            this.comboBox1.Location = new System.Drawing.Point(25, 8);
            this.comboBox1.Name = "comboBox1";
            this.comboBox1.Size = new System.Drawing.Size(121, 21);
            this.comboBox1.TabIndex = 0;
            this.comboBox1.Text = "Details";
            this.comboBox1.SelectedIndexChanged += new System.EventHandler(this.comboBox1_SelectedIndexChanged);
            // 
            // txtSearch
            // 
            this.txtSearch.Location = new System.Drawing.Point(174, 8);
            this.txtSearch.Name = "txtSearch";
            this.txtSearch.Size = new System.Drawing.Size(335, 20);
            this.txtSearch.TabIndex = 1;
            this.txtSearch.TextChanged += new System.EventHandler(this.txtSearch_TextChanged);
            // 
            // cmsOptions
            // 
            this.cmsOptions.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.extractSlotToolStripMenuItem,
            this.injectSlotToolStripMenuItem,
            this.toolStripSeparator1,
            this.propertiesToolStripMenuItem});
            this.cmsOptions.Name = "cmsOptions";
            this.cmsOptions.Size = new System.Drawing.Size(151, 76);
            // 
            // extractSlotToolStripMenuItem
            // 
            this.extractSlotToolStripMenuItem.Name = "extractSlotToolStripMenuItem";
            this.extractSlotToolStripMenuItem.Size = new System.Drawing.Size(150, 22);
            this.extractSlotToolStripMenuItem.Text = "Extract Slot";
            // 
            // injectSlotToolStripMenuItem
            // 
            this.injectSlotToolStripMenuItem.Name = "injectSlotToolStripMenuItem";
            this.injectSlotToolStripMenuItem.Size = new System.Drawing.Size(150, 22);
            this.injectSlotToolStripMenuItem.Text = "Inject Slot";
            // 
            // toolStripSeparator1
            // 
            this.toolStripSeparator1.Name = "toolStripSeparator1";
            this.toolStripSeparator1.Size = new System.Drawing.Size(147, 6);
            // 
            // propertiesToolStripMenuItem
            // 
            this.propertiesToolStripMenuItem.Name = "propertiesToolStripMenuItem";
            this.propertiesToolStripMenuItem.Size = new System.Drawing.Size(150, 22);
            this.propertiesToolStripMenuItem.Text = "Slot Properties";
            this.propertiesToolStripMenuItem.Click += new System.EventHandler(this.propertiesToolStripMenuItem_Click);
            // 
            // pbxSearch
            // 
            this.pbxSearch.ContextMenuStrip = this.cmsSearchOptions;
            this.pbxSearch.Image = ((System.Drawing.Image)(resources.GetObject("pbxSearch.Image")));
            this.pbxSearch.Location = new System.Drawing.Point(152, 10);
            this.pbxSearch.Name = "pbxSearch";
            this.pbxSearch.Size = new System.Drawing.Size(16, 16);
            this.pbxSearch.SizeMode = System.Windows.Forms.PictureBoxSizeMode.AutoSize;
            this.pbxSearch.TabIndex = 6;
            this.pbxSearch.TabStop = false;
            // 
            // cmsSearchOptions
            // 
            this.cmsSearchOptions.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.nameToolStripMenuItem,
            this.indexToolStripMenuItem});
            this.cmsSearchOptions.Name = "cmsSearchOptions";
            this.cmsSearchOptions.Size = new System.Drawing.Size(107, 48);
            // 
            // nameToolStripMenuItem
            // 
            this.nameToolStripMenuItem.Checked = true;
            this.nameToolStripMenuItem.CheckOnClick = true;
            this.nameToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.nameToolStripMenuItem.Name = "nameToolStripMenuItem";
            this.nameToolStripMenuItem.Size = new System.Drawing.Size(106, 22);
            this.nameToolStripMenuItem.Text = "Name";
            this.nameToolStripMenuItem.Click += new System.EventHandler(this.nameToolStripMenuItem_Click);
            // 
            // indexToolStripMenuItem
            // 
            this.indexToolStripMenuItem.CheckOnClick = true;
            this.indexToolStripMenuItem.Name = "indexToolStripMenuItem";
            this.indexToolStripMenuItem.Size = new System.Drawing.Size(106, 22);
            this.indexToolStripMenuItem.Text = "Index";
            this.indexToolStripMenuItem.Click += new System.EventHandler(this.indexToolStripMenuItem_Click);
            // 
            // pictureBox1
            // 
            this.pictureBox1.ContextMenuStrip = this.cmsWindowOptions;
            this.pictureBox1.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox1.Image")));
            this.pictureBox1.Location = new System.Drawing.Point(3, 10);
            this.pictureBox1.Name = "pictureBox1";
            this.pictureBox1.Size = new System.Drawing.Size(16, 16);
            this.pictureBox1.SizeMode = System.Windows.Forms.PictureBoxSizeMode.AutoSize;
            this.pictureBox1.TabIndex = 5;
            this.pictureBox1.TabStop = false;
            // 
            // cmsWindowOptions
            // 
            this.cmsWindowOptions.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.showToolStripMenuItem,
            this.viewByToolStripMenuItem,
            this.groupByToolStripMenuItem1,
            this.toolStripSeparator2,
            this.refreshWindowToolStripMenuItem});
            this.cmsWindowOptions.Name = "cmsWindowOptions";
            this.cmsWindowOptions.Size = new System.Drawing.Size(161, 98);
            // 
            // showToolStripMenuItem
            // 
            this.showToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.mapInformationToolStripMenuItem,
            this.toolStripSeparator4,
            this.placementBlocksToolStripMenuItem,
            this.tagIndexToolStripMenuItem});
            this.showToolStripMenuItem.Name = "showToolStripMenuItem";
            this.showToolStripMenuItem.Size = new System.Drawing.Size(160, 22);
            this.showToolStripMenuItem.Text = "Show";
            // 
            // placementBlocksToolStripMenuItem
            // 
            this.placementBlocksToolStripMenuItem.Checked = true;
            this.placementBlocksToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.placementBlocksToolStripMenuItem.Name = "placementBlocksToolStripMenuItem";
            this.placementBlocksToolStripMenuItem.Size = new System.Drawing.Size(167, 22);
            this.placementBlocksToolStripMenuItem.Text = "Placement Blocks";
            this.placementBlocksToolStripMenuItem.Click += new System.EventHandler(this.placementBlocksToolStripMenuItem_Click);
            // 
            // tagIndexToolStripMenuItem
            // 
            this.tagIndexToolStripMenuItem.Name = "tagIndexToolStripMenuItem";
            this.tagIndexToolStripMenuItem.Size = new System.Drawing.Size(167, 22);
            this.tagIndexToolStripMenuItem.Text = "Tag Index";
            this.tagIndexToolStripMenuItem.Click += new System.EventHandler(this.tagIndexToolStripMenuItem_Click);
            // 
            // viewByToolStripMenuItem
            // 
            this.viewByToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.reservedSlotsToolStripMenuItem,
            this.originalSlotsToolStripMenuItem,
            this.addedSlotsToolStripMenuItem,
            this.editedSlotsToolStripMenuItem,
            this.unsortedSlotsToolStripMenuItem,
            this.emptySlotsToolStripMenuItem,
            this.playerSpawnsToolStripMenuItem});
            this.viewByToolStripMenuItem.Name = "viewByToolStripMenuItem";
            this.viewByToolStripMenuItem.Size = new System.Drawing.Size(160, 22);
            this.viewByToolStripMenuItem.Text = "View By";
            // 
            // reservedSlotsToolStripMenuItem
            // 
            this.reservedSlotsToolStripMenuItem.Checked = true;
            this.reservedSlotsToolStripMenuItem.CheckOnClick = true;
            this.reservedSlotsToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.reservedSlotsToolStripMenuItem.Name = "reservedSlotsToolStripMenuItem";
            this.reservedSlotsToolStripMenuItem.Size = new System.Drawing.Size(150, 22);
            this.reservedSlotsToolStripMenuItem.Text = "Reserved Slots";
            this.reservedSlotsToolStripMenuItem.Click += new System.EventHandler(this.refreshToolStripMenuItem_Click);
            // 
            // originalSlotsToolStripMenuItem
            // 
            this.originalSlotsToolStripMenuItem.Checked = true;
            this.originalSlotsToolStripMenuItem.CheckOnClick = true;
            this.originalSlotsToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.originalSlotsToolStripMenuItem.Name = "originalSlotsToolStripMenuItem";
            this.originalSlotsToolStripMenuItem.Size = new System.Drawing.Size(150, 22);
            this.originalSlotsToolStripMenuItem.Text = "Original Slots";
            this.originalSlotsToolStripMenuItem.Click += new System.EventHandler(this.refreshToolStripMenuItem_Click);
            // 
            // addedSlotsToolStripMenuItem
            // 
            this.addedSlotsToolStripMenuItem.Checked = true;
            this.addedSlotsToolStripMenuItem.CheckOnClick = true;
            this.addedSlotsToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.addedSlotsToolStripMenuItem.Name = "addedSlotsToolStripMenuItem";
            this.addedSlotsToolStripMenuItem.Size = new System.Drawing.Size(150, 22);
            this.addedSlotsToolStripMenuItem.Text = "Added Slots";
            this.addedSlotsToolStripMenuItem.Click += new System.EventHandler(this.refreshToolStripMenuItem_Click);
            // 
            // editedSlotsToolStripMenuItem
            // 
            this.editedSlotsToolStripMenuItem.Checked = true;
            this.editedSlotsToolStripMenuItem.CheckOnClick = true;
            this.editedSlotsToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.editedSlotsToolStripMenuItem.Name = "editedSlotsToolStripMenuItem";
            this.editedSlotsToolStripMenuItem.Size = new System.Drawing.Size(150, 22);
            this.editedSlotsToolStripMenuItem.Text = "Edited Slots";
            this.editedSlotsToolStripMenuItem.Click += new System.EventHandler(this.refreshToolStripMenuItem_Click);
            // 
            // unsortedSlotsToolStripMenuItem
            // 
            this.unsortedSlotsToolStripMenuItem.Checked = true;
            this.unsortedSlotsToolStripMenuItem.CheckOnClick = true;
            this.unsortedSlotsToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.unsortedSlotsToolStripMenuItem.Name = "unsortedSlotsToolStripMenuItem";
            this.unsortedSlotsToolStripMenuItem.Size = new System.Drawing.Size(150, 22);
            this.unsortedSlotsToolStripMenuItem.Text = "Unsorted Slots";
            this.unsortedSlotsToolStripMenuItem.Click += new System.EventHandler(this.refreshToolStripMenuItem_Click);
            // 
            // emptySlotsToolStripMenuItem
            // 
            this.emptySlotsToolStripMenuItem.Checked = true;
            this.emptySlotsToolStripMenuItem.CheckOnClick = true;
            this.emptySlotsToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.emptySlotsToolStripMenuItem.Name = "emptySlotsToolStripMenuItem";
            this.emptySlotsToolStripMenuItem.Size = new System.Drawing.Size(150, 22);
            this.emptySlotsToolStripMenuItem.Text = "Empty Slots";
            this.emptySlotsToolStripMenuItem.Click += new System.EventHandler(this.refreshToolStripMenuItem_Click);
            // 
            // playerSpawnsToolStripMenuItem
            // 
            this.playerSpawnsToolStripMenuItem.Checked = true;
            this.playerSpawnsToolStripMenuItem.CheckOnClick = true;
            this.playerSpawnsToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.playerSpawnsToolStripMenuItem.Name = "playerSpawnsToolStripMenuItem";
            this.playerSpawnsToolStripMenuItem.Size = new System.Drawing.Size(150, 22);
            this.playerSpawnsToolStripMenuItem.Text = "Player Spawns";
            this.playerSpawnsToolStripMenuItem.Click += new System.EventHandler(this.refreshToolStripMenuItem_Click);
            // 
            // groupByToolStripMenuItem1
            // 
            this.groupByToolStripMenuItem1.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.noGroupingToolStripMenuItem,
            this.toolStripSeparator3,
            this.blockTypeToolStripMenuItem1,
            this.tagTypeToolStripMenuItem1});
            this.groupByToolStripMenuItem1.Name = "groupByToolStripMenuItem1";
            this.groupByToolStripMenuItem1.Size = new System.Drawing.Size(160, 22);
            this.groupByToolStripMenuItem1.Text = "Group By";
            // 
            // noGroupingToolStripMenuItem
            // 
            this.noGroupingToolStripMenuItem.CheckOnClick = true;
            this.noGroupingToolStripMenuItem.Name = "noGroupingToolStripMenuItem";
            this.noGroupingToolStripMenuItem.Size = new System.Drawing.Size(143, 22);
            this.noGroupingToolStripMenuItem.Text = "No Grouping";
            this.noGroupingToolStripMenuItem.Click += new System.EventHandler(this.noGroupingToolStripMenuItem_Click);
            // 
            // toolStripSeparator3
            // 
            this.toolStripSeparator3.Name = "toolStripSeparator3";
            this.toolStripSeparator3.Size = new System.Drawing.Size(140, 6);
            // 
            // blockTypeToolStripMenuItem1
            // 
            this.blockTypeToolStripMenuItem1.Checked = true;
            this.blockTypeToolStripMenuItem1.CheckState = System.Windows.Forms.CheckState.Checked;
            this.blockTypeToolStripMenuItem1.Name = "blockTypeToolStripMenuItem1";
            this.blockTypeToolStripMenuItem1.Size = new System.Drawing.Size(143, 22);
            this.blockTypeToolStripMenuItem1.Text = "Block Type";
            this.blockTypeToolStripMenuItem1.Click += new System.EventHandler(this.blockTypeToolStripMenuItem1_Click);
            // 
            // tagTypeToolStripMenuItem1
            // 
            this.tagTypeToolStripMenuItem1.Name = "tagTypeToolStripMenuItem1";
            this.tagTypeToolStripMenuItem1.Size = new System.Drawing.Size(143, 22);
            this.tagTypeToolStripMenuItem1.Text = "Tag Type";
            this.tagTypeToolStripMenuItem1.Click += new System.EventHandler(this.tagTypeToolStripMenuItem1_Click);
            // 
            // toolStripSeparator2
            // 
            this.toolStripSeparator2.Name = "toolStripSeparator2";
            this.toolStripSeparator2.Size = new System.Drawing.Size(157, 6);
            // 
            // refreshWindowToolStripMenuItem
            // 
            this.refreshWindowToolStripMenuItem.Name = "refreshWindowToolStripMenuItem";
            this.refreshWindowToolStripMenuItem.Size = new System.Drawing.Size(160, 22);
            this.refreshWindowToolStripMenuItem.Text = "Refresh Window";
            this.refreshWindowToolStripMenuItem.Click += new System.EventHandler(this.refreshToolStripMenuItem_Click);
            // 
            // mapInformationToolStripMenuItem
            // 
            this.mapInformationToolStripMenuItem.Name = "mapInformationToolStripMenuItem";
            this.mapInformationToolStripMenuItem.Size = new System.Drawing.Size(167, 22);
            this.mapInformationToolStripMenuItem.Text = "Map Information";
            this.mapInformationToolStripMenuItem.Click += new System.EventHandler(this.mapInformationToolStripMenuItem_Click);
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = "toolStripSeparator4";
            this.toolStripSeparator4.Size = new System.Drawing.Size(164, 6);
            // 
            // listView1
            // 
            this.listView1.AllowDrop = true;
            this.listView1.AllowRowReorder = false;
            this.listView1.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.columnHeader1,
            this.columnHeader2});
            listViewGroup1.Header = "Reserved Slots";
            listViewGroup1.HeaderAlignment = System.Windows.Forms.HorizontalAlignment.Center;
            listViewGroup1.Name = "Reserved";
            listViewGroup2.Header = "Original Slots";
            listViewGroup2.HeaderAlignment = System.Windows.Forms.HorizontalAlignment.Center;
            listViewGroup2.Name = "Original";
            listViewGroup3.Header = "Added Slots";
            listViewGroup3.HeaderAlignment = System.Windows.Forms.HorizontalAlignment.Center;
            listViewGroup3.Name = "Added";
            listViewGroup4.Header = "Edited Slots";
            listViewGroup4.HeaderAlignment = System.Windows.Forms.HorizontalAlignment.Center;
            listViewGroup4.Name = "Edited";
            listViewGroup5.Header = "Unsorted Slots";
            listViewGroup5.HeaderAlignment = System.Windows.Forms.HorizontalAlignment.Center;
            listViewGroup5.Name = "Unsorted";
            listViewGroup6.Header = "Player Spawns";
            listViewGroup6.HeaderAlignment = System.Windows.Forms.HorizontalAlignment.Center;
            listViewGroup6.Name = "Player_Spawn";
            listViewGroup7.Header = "Empty Slots";
            listViewGroup7.HeaderAlignment = System.Windows.Forms.HorizontalAlignment.Center;
            listViewGroup7.Name = "NULL";
            this.listView1.Groups.AddRange(new System.Windows.Forms.ListViewGroup[] {
            listViewGroup1,
            listViewGroup2,
            listViewGroup3,
            listViewGroup4,
            listViewGroup5,
            listViewGroup6,
            listViewGroup7});
            this.listView1.HeaderStyle = System.Windows.Forms.ColumnHeaderStyle.Nonclickable;
            this.listView1.Location = new System.Drawing.Point(0, 34);
            this.listView1.MultiSelect = false;
            this.listView1.Name = "listView1";
            this.listView1.ShowItemToolTips = true;
            this.listView1.Size = new System.Drawing.Size(514, 364);
            this.listView1.TabIndex = 4;
            this.listView1.UseCompatibleStateImageBehavior = false;
            this.listView1.View = System.Windows.Forms.View.Details;
            this.listView1.MouseDown += new System.Windows.Forms.MouseEventHandler(this.listView1_MouseDown);
            // 
            // columnHeader1
            // 
            this.columnHeader1.Text = "Name";
            this.columnHeader1.Width = 400;
            // 
            // columnHeader2
            // 
            this.columnHeader2.Text = "Index";
            this.columnHeader2.Width = 103;
            // 
            // ListpanelV2
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.Controls.Add(this.panel1);
            this.Controls.Add(this.listView1);
            this.Controls.Add(this.comboBox1);
            this.Controls.Add(this.txtSearch);
            this.Controls.Add(this.pbxSearch);
            this.Controls.Add(this.pictureBox1);
            this.Name = "ListpanelV2";
            this.Size = new System.Drawing.Size(514, 451);
            this.panel1.ResumeLayout(false);
            this.cmsOptions.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.pbxSearch)).EndInit();
            this.cmsSearchOptions.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).EndInit();
            this.cmsWindowOptions.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Panel panel1;
        private System.Windows.Forms.Button btnClear;
        private System.Windows.Forms.Button btnPaste;
        private System.Windows.Forms.Button btnCopy;
        private System.Windows.Forms.Button btnEdit;
        private System.Windows.Forms.ComboBox comboBox1;
        private System.Windows.Forms.Button btnSwap;
        private System.Windows.Forms.TextBox txtSearch;
        private System.Windows.Forms.Button btnSave;
        private System.Windows.Forms.ContextMenuStrip cmsOptions;
        private System.Windows.Forms.ToolStripMenuItem propertiesToolStripMenuItem;
        private ListViewEx listView1;
        private System.Windows.Forms.ColumnHeader columnHeader1;
        private System.Windows.Forms.ColumnHeader columnHeader2;
        private System.Windows.Forms.PictureBox pictureBox1;
        private System.Windows.Forms.PictureBox pbxSearch;
        private System.Windows.Forms.ContextMenuStrip cmsSearchOptions;
        private System.Windows.Forms.ToolStripMenuItem nameToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem indexToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem extractSlotToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem injectSlotToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator1;
        private System.Windows.Forms.ContextMenuStrip cmsWindowOptions;
        private System.Windows.Forms.ToolStripMenuItem refreshWindowToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator2;
        private System.Windows.Forms.ToolStripMenuItem groupByToolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem blockTypeToolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem tagTypeToolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem showToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem placementBlocksToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tagIndexToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem noGroupingToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator3;
        private System.Windows.Forms.ToolStripMenuItem viewByToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem reservedSlotsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem originalSlotsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem addedSlotsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem editedSlotsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem unsortedSlotsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem emptySlotsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem playerSpawnsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem mapInformationToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
    }
}

----------------------------------------------------------------------------------------------------
  ListpanelV2.resx (Micrsoft .NET Managed Resource File)
----------------------------------------------------------------------------------------------------
  ListViewEx.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Drawing;
using System.Collections;

namespace Sandbox.Controls
{
    public class ListViewEx : ListView
    {
        private const string REORDER = "Reorder";

        private bool allowRowReorder = true;
        public bool AllowRowReorder
        {
            get
            {
                return this.allowRowReorder;
            }
            set
            {
                this.allowRowReorder = value;
                base.AllowDrop = value;
            }
        }

        public new SortOrder Sorting
        {
            get
            {
                return SortOrder.None;
            }
            set
            {
                base.Sorting = SortOrder.None;
            }
        }

        public ListViewEx()
            : base()
        {
            this.AllowRowReorder = true;
        }

        protected override void OnDragDrop(DragEventArgs e)
        {
            base.OnDragDrop(e);
            if (!this.AllowRowReorder)
            {
                return;
            }
            if (base.SelectedItems.Count == 0)
            {
                return;
            }
            Point cp = base.PointToClient(new Point(e.X, e.Y));
            ListViewItem dragToItem = base.GetItemAt(cp.X, cp.Y);
            if (dragToItem == null)
            {
                return;
            }
            int dropIndex = dragToItem.Index;
            if (dropIndex > base.SelectedItems[0].Index)
            {
                dropIndex++;
            }
            ArrayList insertItems =
                new ArrayList(base.SelectedItems.Count);
            foreach (ListViewItem item in base.SelectedItems)
            {
                insertItems.Add(item.Clone());
            }
            for (int i = insertItems.Count - 1; i >= 0; i--)
            {
                ListViewItem insertItem =
                    (ListViewItem)insertItems[i];
                base.Items.Insert(dropIndex, insertItem);
            }
            foreach (ListViewItem removeItem in base.SelectedItems)
            {
                base.Items.Remove(removeItem);
            }
        }

        protected override void OnDragOver(DragEventArgs e)
        {
            if (!this.AllowRowReorder)
            {
                e.Effect = DragDropEffects.None;
                return;
            }
            if (!e.Data.GetDataPresent(DataFormats.Text))
            {
                e.Effect = DragDropEffects.None;
                return;
            }
            Point cp = base.PointToClient(new Point(e.X, e.Y));
            ListViewItem hoverItem = base.GetItemAt(cp.X, cp.Y);
            if (hoverItem == null)
            {
                e.Effect = DragDropEffects.None;
                return;
            }
            foreach (ListViewItem moveItem in base.SelectedItems)
            {
                if (moveItem.Index == hoverItem.Index)
                {
                    e.Effect = DragDropEffects.None;
                    hoverItem.EnsureVisible();
                    return;
                }
            }
            base.OnDragOver(e);
            String text = (String)e.Data.GetData(REORDER.GetType());
            if (text.CompareTo(REORDER) == 0)
            {
                e.Effect = DragDropEffects.Move;
                hoverItem.EnsureVisible();
            }
            else
            {
                e.Effect = DragDropEffects.None;
            }
        }

        protected override void OnDragEnter(DragEventArgs e)
        {
            base.OnDragEnter(e);
            if (!this.AllowRowReorder)
            {
                e.Effect = DragDropEffects.None;
                return;
            }
            if (!e.Data.GetDataPresent(DataFormats.Text))
            {
                e.Effect = DragDropEffects.None;
                return;
            }
            base.OnDragEnter(e);
            String text = (String)e.Data.GetData(REORDER.GetType());
            if (text.CompareTo(REORDER) == 0)
            {
                e.Effect = DragDropEffects.Move;
            }
            else
            {
                e.Effect = DragDropEffects.None;
            }
        }

        protected override void OnItemDrag(ItemDragEventArgs e)
        {
            base.OnItemDrag(e);
            if (!this.AllowRowReorder)
            {
                return;
            }
            base.DoDragDrop(REORDER, DragDropEffects.Move);
        }
    }
}

----------------------------------------------------------------------------------------------------
  SuccessMessage.cs
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace Sandbox.Controls
{
    public partial class SuccessMessage : Form
    {
        public SuccessMessage(string message)
        {
            InitializeComponent();
            lblMessage.Text = message;
        }

        private void button1_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.OK;
        }
    }
}

----------------------------------------------------------------------------------------------------
  SuccessMessage.Designer.cs
namespace Sandbox.Controls
{
    partial class SuccessMessage
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SuccessMessage));
            this.pictureBox1 = new System.Windows.Forms.PictureBox();
            this.panel1 = new System.Windows.Forms.Panel();
            this.button1 = new System.Windows.Forms.Button();
            this.lblMessage = new System.Windows.Forms.Label();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).BeginInit();
            this.panel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // pictureBox1
            // 
            this.pictureBox1.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox1.Image")));
            this.pictureBox1.Location = new System.Drawing.Point(12, 23);
            this.pictureBox1.Name = "pictureBox1";
            this.pictureBox1.Size = new System.Drawing.Size(64, 64);
            this.pictureBox1.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.pictureBox1.TabIndex = 0;
            this.pictureBox1.TabStop = false;
            // 
            // panel1
            // 
            this.panel1.BackColor = System.Drawing.SystemColors.ButtonHighlight;
            this.panel1.Controls.Add(this.button1);
            this.panel1.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.panel1.Location = new System.Drawing.Point(0, 105);
            this.panel1.Name = "panel1";
            this.panel1.Size = new System.Drawing.Size(280, 39);
            this.panel1.TabIndex = 1;
            // 
            // button1
            // 
            this.button1.Location = new System.Drawing.Point(193, 8);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(75, 23);
            this.button1.TabIndex = 0;
            this.button1.Text = "OK";
            this.button1.UseVisualStyleBackColor = true;
            this.button1.Click += new System.EventHandler(this.button1_Click);
            // 
            // lblMessage
            // 
            this.lblMessage.AutoSize = true;
            this.lblMessage.Location = new System.Drawing.Point(92, 46);
            this.lblMessage.Name = "lblMessage";
            this.lblMessage.Size = new System.Drawing.Size(50, 13);
            this.lblMessage.TabIndex = 2;
            this.lblMessage.Text = "Message";
            // 
            // SuccessMessage
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(280, 144);
            this.Controls.Add(this.lblMessage);
            this.Controls.Add(this.panel1);
            this.Controls.Add(this.pictureBox1);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "SuccessMessage";
            this.ShowIcon = false;
            this.ShowInTaskbar = false;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Success";
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).EndInit();
            this.panel1.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.PictureBox pictureBox1;
        private System.Windows.Forms.Panel panel1;
        private System.Windows.Forms.Button button1;
        private System.Windows.Forms.Label lblMessage;
    }
}

----------------------------------------------------------------------------------------------------
  SuccessMessage.resx (Micrsoft .NET Managed Resource File)
----------------------------------------------------------------------------------------------------

 >Data
----------------------------------------------------------------------------------------------------
  Chunk.cs
using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Windows.Forms;
using System.Collections;
using System.IO;
using System.Xml;
using Sandbox.IO;
using System.Xml.Serialization;
using System.ComponentModel;

namespace Sandbox.Data
{
    /// <summary>
    /// This is the base class used for reading and writing chunks of 
    /// data from a halo 3 map file.
    /// </summary>
    public abstract class Chunk
    {
        //private Map.Map map;
        //[System.ComponentModel.Browsable(false), XmlIgnoreAttribute()] //Dont show in property grid
        //public Map.Map Map { get { return map; } set { map = value; } }

        public Chunk() { }
        //public Chunk(Map.Map Map) { map = Map; }
        
        private FieldInfo[] fields;

        public void SetFields()
        {
            fields = this.GetType().GetFields(BindingFlags.Public | BindingFlags.Instance);
        }

        public virtual void Read(EndianReader br)
        {
            fields = this.GetType().GetFields(BindingFlags.Public | BindingFlags.Instance);
            foreach (FieldInfo fi in fields)
            {
                if (fi.FieldType == typeof(byte))
                    fi.SetValue(this, br.ReadByte());
                else if (fi.FieldType == typeof(char))
                    fi.SetValue(this, br.ReadChar());
                else if (fi.FieldType == typeof(short))
                    fi.SetValue(this, br.ReadInt16());
                else if (fi.FieldType == typeof(ushort))
                    fi.SetValue(this, br.ReadUInt16());
                else if (fi.FieldType == typeof(int))
                    fi.SetValue(this, br.ReadInt32());
                else if (fi.FieldType == typeof(uint))
                    fi.SetValue(this, br.ReadUInt32());
                else if (fi.FieldType == typeof(long))
                    fi.SetValue(this, br.ReadInt64());
                else if (fi.FieldType == typeof(ulong))
                    fi.SetValue(this, br.ReadUInt64());
                else if (fi.FieldType == typeof(double))
                    fi.SetValue(this, br.ReadDouble());
                else if (fi.FieldType == typeof(float))
                    fi.SetValue(this, br.ReadSingle());
                else if (fi.FieldType == typeof(float))
                    fi.SetValue(this, br.ReadSingle());
                else if (fi.FieldType.IsEnum)
                {
                    Type t = Enum.GetUnderlyingType(fi.FieldType);
                    if (t == typeof(byte))
                        fi.SetValue(this, br.ReadByte());
                    else if (t == typeof(short))
                        fi.SetValue(this, br.ReadInt16());
                    else if (t == typeof(int))
                        fi.SetValue(this, br.ReadInt32());
                    else if (t == typeof(long))
                        fi.SetValue(this, br.ReadInt64());
                    else
                    {
                        MessageBox.Show("Unable to read this enum type! Type: " + t.ToString());
                    }
                }
                else if (fi.FieldType == typeof(byte[]))
                {
                    int size = 0;
                    object[] attributes = fi.GetCustomAttributes(typeof(SizeAttribute), true);
                    if (attributes.Length > 0)
                        size = ((SizeAttribute)attributes[0]).Size;

                    fi.SetValue(this, br.ReadBytes(size));
                }
                else if (fi.FieldType == typeof(char[]))
                {
                    int size = 0;
                    object[] attributes = fi.GetCustomAttributes(typeof(SizeAttribute), true);
                    if (attributes.Length > 0)
                        size = ((SizeAttribute)attributes[0]).Size;
                    fi.SetValue(this, br.ReadChars(size));
                }
                else if (fi.FieldType == typeof(string))
                {
                    int size = 32;
                    StringType st = StringType.Ascii;
                    object[] attributes = fi.GetCustomAttributes(typeof(StringAttribute), true);
                    if (attributes.Length > 0)
                    {
                        size = ((StringAttribute)attributes[0]).Size;
                        st = ((StringAttribute)attributes[0]).StringType;
                    }
                    string temp = "";

                    if (st == StringType.Ascii)
                    {
                        ASCIIEncoding ae = new ASCIIEncoding();
                        temp = ae.GetString(br.ReadBytes(size)).Replace("\0", "");
                    }
                    else
                    {
                        temp = br.ReadUnicodeString(size);
                    }

                    fi.SetValue(this, temp);
                }                
                /*else if (fi.FieldType == typeof(StringID))
                {
                    object strID = Activator.CreateInstance(fi.FieldType, new object[] { br, map });
                    fi.SetValue(this, strID);
                }*/
                else if (fi.FieldType == typeof(Bitmask8))
                {
                    string[] options = null;

                    object[] attributes = fi.GetCustomAttributes(typeof(OptionsAttribute), true);
                    if (attributes.Length > 0)
                    {
                        options = ((OptionsAttribute)attributes[0]).Options;
                    }

                    object bm = Activator.CreateInstance(fi.FieldType, new object[] { br, options });
                    fi.SetValue(this, bm);
                }
                else if (fi.FieldType == typeof(Bitmask16))
                {
                    string[] options = null;

                    object[] attributes = fi.GetCustomAttributes(typeof(OptionsAttribute), true);
                    if (attributes.Length > 0)
                    {
                        options = ((OptionsAttribute)attributes[0]).Options;
                    }

                    object bm = Activator.CreateInstance(fi.FieldType, new object[] { br, options });
                    fi.SetValue(this, bm);
                }
                else if (fi.FieldType == typeof(Bitmask32))
                {
                    string[] options = null;

                    object[] attributes = fi.GetCustomAttributes(typeof(OptionsAttribute), true);
                    if (attributes.Length > 0)
                    {
                        options = ((OptionsAttribute)attributes[0]).Options;
                    }

                    object bm = Activator.CreateInstance(fi.FieldType, new object[] { br, options });
                    fi.SetValue(this, bm);
                }
                else if (fi.FieldType == typeof(TagReference))
                {
                    IdentType type = IdentType.TagReference;

                    object[] attributes = fi.GetCustomAttributes(typeof(IdentAttribute), true);
                    if (attributes.Length > 0)
                    {
                        type = ((IdentAttribute)attributes[0]).Type;
                    }

                    object tagref = Activator.CreateInstance(fi.FieldType, new object[] { br, type });
                    fi.SetValue(this, tagref);
                }
                /*else if (fi.FieldType.IsGenericType && fi.FieldType.GetGenericTypeDefinition() == typeof(H3Reflexive<>))
                {
                    object reflexive = Activator.CreateInstance(fi.FieldType, new object[] { br, Map });
                    fi.SetValue(this, reflexive);
                }*/
                else
                {
                    MessageBox.Show("Unable to read this datatype! Type: " + fi.FieldType.ToString());
                }
            }
        }
        
        public virtual void Write(EndianWriter bw)
        {
            foreach (FieldInfo fi in fields)
            {
                if (fi.FieldType == typeof(byte))
                    bw.Write((byte)fi.GetValue(this));
                else if (fi.FieldType == typeof(char))
                    bw.Write((char)fi.GetValue(this));
                else if (fi.FieldType == typeof(short))
                    bw.Write((short)fi.GetValue(this));
                else if (fi.FieldType == typeof(ushort))
                    bw.Write((ushort)fi.GetValue(this));
                else if (fi.FieldType == typeof(int))
                    bw.Write((int)fi.GetValue(this));
                else if (fi.FieldType == typeof(uint))
                    bw.Write((uint)fi.GetValue(this));
                else if (fi.FieldType == typeof(long))
                    bw.Write((long)fi.GetValue(this));
                else if (fi.FieldType == typeof(ulong))
                    bw.Write((ulong)fi.GetValue(this));
                else if (fi.FieldType == typeof(double))
                    bw.Write((double)fi.GetValue(this));
                else if (fi.FieldType == typeof(float))
                    bw.Write((float)fi.GetValue(this));
                else if (fi.FieldType == typeof(float))
                    bw.Write((float)fi.GetValue(this));
                else if (fi.FieldType.IsEnum)
                {
                    Type t = Enum.GetUnderlyingType(fi.FieldType);
                    if (t == typeof(byte))
                        bw.Write((byte)fi.GetValue(this));
                    else if (t == typeof(short))
                        bw.Write((short)fi.GetValue(this));
                    else if (t == typeof(int))
                        bw.Write((int)fi.GetValue(this));
                    else if (t == typeof(long))
                        bw.Write((long)fi.GetValue(this));
                    else
                    {
                        MessageBox.Show("Unable to write this enum type! Type: " + t.ToString());
                    }
                }
                else if (fi.FieldType == typeof(char[]))
                {
                    bw.Write((char[])fi.GetValue(this));
                }
                else if (fi.FieldType == typeof(byte[]))
                {
                    bw.Write((byte[])fi.GetValue(this));
                }
                else if (fi.FieldType == typeof(string))
                {
                    //Set Default properties incase there was any defined in the plugin
                    int size = 32;
                    StringType st = StringType.Ascii;
                    //Get attributes from plugin
                    object[] attributes = fi.GetCustomAttributes(typeof(StringAttribute), true);
                    //If there were attribute returned
                    if (attributes.Length > 0)
                    {
                        //Set properties
                        size = ((StringAttribute)attributes[0]).Size;
                        st = ((StringAttribute)attributes[0]).StringType;
                    }

                    if (st == StringType.Ascii)
                    {
                        //Write string
                        bw.WriteAsciiString((string)fi.GetValue(this), size);
                    }
                    else
                    {
                        bw.WriteUnicodeString((string)fi.GetValue(this), size);
                    }
                }
                else if (fi.FieldType == typeof(Bitmask8))
                {
                    Bitmask8 b = (Bitmask8)fi.GetValue(this);
                    b.Write(bw);
                }
                else if (fi.FieldType == typeof(Bitmask16))
                {
                    Bitmask16 b = (Bitmask16)fi.GetValue(this);
                    b.Write(bw);
                }
                else if (fi.FieldType == typeof(Bitmask32))
                {
                    Bitmask32 b = (Bitmask32)fi.GetValue(this);
                    b.Write(bw);
                }
                else if (fi.FieldType == typeof(TagReference))
                {
                    TagReference t = (TagReference)fi.GetValue(this);
                    t.Write(bw);
                }
                /*else if (fi.FieldType.IsGenericType && fi.FieldType.GetGenericTypeDefinition() == typeof(H3Reflexive<>))
                {
                    //Remember Pos int Meta
                    int oldpos = (int)bw.BaseStream.Position;
                    //Try incase of error thrown if reflex is null
                    try
                    {
                        //Get our reflex value
                        IList list = (IList)fi.GetValue(this);
                        //If reflex is not null
                        if (list.Count != 0)
                        {
                            //Find our Write method
                            MethodInfo mi = list.GetType().GetMethod("Write");
                            //This will hold our parameters
                            object[] parameters = new object[1];
                            //Set parameteres
                            parameters[0] = bw;
                            //Invoke method
                            mi.Invoke(list, parameters);
                        }
                    }
                    catch { }
                    //Return to our position in meta + 12
                    bw.BaseStream.Position = oldpos + 12;
                }*/
                else
                {
                    //Prompt user if a datatype was not writeable
                    MessageBox.Show("Unable to write this datatype! Type: " + fi.FieldType.ToString());
                }
            }
        }
        
        /*public virtual void Extract(EndianWriter bw, XmlTextWriter xtw)
        {           
            foreach (FieldInfo fi in fields)
            {
                if (fi.FieldType == typeof(byte))
                    bw.Write((byte)fi.GetValue(this));
                else if (fi.FieldType == typeof(char))
                    bw.Write((char)fi.GetValue(this));
                else if (fi.FieldType == typeof(short))
                    bw.Write((short)fi.GetValue(this));
                else if (fi.FieldType == typeof(ushort))
                    bw.Write((ushort)fi.GetValue(this));
                else if (fi.FieldType == typeof(int))
                    bw.Write((int)fi.GetValue(this));
                else if (fi.FieldType == typeof(uint))
                    bw.Write((uint)fi.GetValue(this));
                else if (fi.FieldType == typeof(long))
                    bw.Write((long)fi.GetValue(this));
                else if (fi.FieldType == typeof(ulong))
                    bw.Write((ulong)fi.GetValue(this));
                else if (fi.FieldType == typeof(double))
                    bw.Write((double)fi.GetValue(this));
                else if (fi.FieldType == typeof(float))
                    bw.Write((float)fi.GetValue(this));
                else if (fi.FieldType == typeof(float))
                    bw.Write((float)fi.GetValue(this));
                else if (fi.FieldType.IsEnum)
                {
                    Type t = Enum.GetUnderlyingType(fi.FieldType);
                    if (t == typeof(byte))
                        bw.Write((byte)fi.GetValue(this));
                    else if (t == typeof(short))
                        bw.Write((short)fi.GetValue(this));
                    else if (t == typeof(int))
                        bw.Write((int)fi.GetValue(this));
                    else if (t == typeof(long))
                        bw.Write((long)fi.GetValue(this));
                    else
                    {
                        MessageBox.Show("Unable to write this enum type! Type: " + t.ToString());
                    }
                }
                else if (fi.FieldType == typeof(char[]))
                {
                    bw.Write((char[])fi.GetValue(this));
                }
                else if (fi.FieldType == typeof(byte[]))
                {
                    bw.Write((byte[])fi.GetValue(this));
                }
                else if (fi.FieldType == typeof(string))
                {
                    //Set Default properties incase there was any defined in the plugin
                    int size = 32;
                    StringType st = StringType.Ascii;
                    //Get attributes from plugin
                    object[] attributes = fi.GetCustomAttributes(typeof(StringAttribute), true);
                    //If there were attribute returned
                    if (attributes.Length > 0)
                    {
                        //Set properties
                        size = ((StringAttribute)attributes[0]).Size;
                        st = ((StringAttribute)attributes[0]).StringType;
                    }
                    //Write string
                    bw.Write((string)fi.GetValue(this));
                    bw.Write(new byte[size - ((string)fi.GetValue(this)).Length]); 
                }
                else if (fi.FieldType == typeof(Bitmask8))
                {
                    Bitmask8 b = (Bitmask8)fi.GetValue(this);
                    b.Write(bw);
                }
                else if (fi.FieldType == typeof(Bitmask16))
                {
                    Bitmask16 b = (Bitmask16)fi.GetValue(this);
                    b.Write(bw);
                }
                else if (fi.FieldType == typeof(Bitmask32))
                {
                    Bitmask32 b = (Bitmask32)fi.GetValue(this);
                    b.Write(bw);
                }
                else if (fi.FieldType == typeof(TagReference))
                {
                    TagReference t = (TagReference)fi.GetValue(this);
                    t.Write(bw);
                }
                else if (fi.FieldType.IsGenericType && fi.FieldType.GetGenericTypeDefinition() == typeof(H3Reflexive<>))
                {
                    IList list = (IList)fi.GetValue(this);
                    bw.Write((int)list.GetType().GetProperty("ChunkCount").GetValue(list, null));
                    bw.Write((uint)list.GetType().GetProperty("Pointer").GetValue(list, null));
                    bw.Write(new byte[4]);
                }
                else
                {
                    //Prompt user if a datatype was not writeable
                    MessageBox.Show("Unable to write this datatype! Type: " + fi.FieldType.ToString());
                }                
            }

            foreach (FieldInfo fi in fields)
            {
                if (fi.FieldType.IsGenericType && fi.FieldType.GetGenericTypeDefinition() == typeof(H3Reflexive<>))
                {
                    //Get our reflex value
                    IList list = (IList)fi.GetValue(this);
                    MethodInfo[] mii = list.GetType().GetMethods();
                    //If reflex is not null
                    if (list.Count != 0)
                    {
                        #region XML
                        xtw.WriteStartElement("Reflexive");
                        xtw.WriteAttributeString("Name", list[0].GetType().Name);
                        xtw.WriteAttributeString("Offset", list.GetType().GetProperty("TagOffset").GetValue(list, null).ToString());
                        xtw.WriteAttributeString("ChunkCount", list.GetType().GetProperty("ChunkCount").GetValue(list, null).ToString());
                        xtw.WriteAttributeString("ChunkSize", list.GetType().GetProperty("ChunkSize").GetValue(list, null).ToString());
                        xtw.WriteAttributeString("Translation", list.GetType().GetProperty("MapOffset").GetValue(list, null).ToString());
                        xtw.WriteAttributeString("ExtractedTranslation", bw.BaseStream.Position.ToString());
                        xtw.WriteEndElement();
                        #endregion
                        //Find our Write method
                        MethodInfo mi = list.GetType().GetMethod("Extract");
                        //This will hold our parameters
                        object[] parameters = new object[2];
                        //Set parameteres
                        parameters[0] = bw;
                        parameters[1] = xtw;
                        //Invoke method
                        mi.Invoke(list, parameters);
                    }
                }
            }
        }

        public virtual void Inject(EndianReader br)
        {
            foreach (FieldInfo fi in fields)
            {
                if (fi.FieldType == typeof(byte))
                    fi.SetValue(this, br.ReadByte());
                else if (fi.FieldType == typeof(char))
                    fi.SetValue(this, br.ReadChar());
                else if (fi.FieldType == typeof(short))
                    fi.SetValue(this, br.ReadInt16());
                else if (fi.FieldType == typeof(ushort))
                    fi.SetValue(this, br.ReadUInt16());
                else if (fi.FieldType == typeof(int))
                    fi.SetValue(this, br.ReadInt32());
                else if (fi.FieldType == typeof(uint))
                    fi.SetValue(this, br.ReadUInt32());
                else if (fi.FieldType == typeof(long))
                    fi.SetValue(this, br.ReadInt64());
                else if (fi.FieldType == typeof(ulong))
                    fi.SetValue(this, br.ReadUInt64());
                else if (fi.FieldType == typeof(double))
                    fi.SetValue(this, br.ReadDouble());
                else if (fi.FieldType == typeof(float))
                    fi.SetValue(this, br.ReadSingle());
                else if (fi.FieldType == typeof(float))
                    fi.SetValue(this, br.ReadSingle());
                else if (fi.FieldType.IsEnum)
                {
                    Type t = Enum.GetUnderlyingType(fi.FieldType);
                    if (t == typeof(byte))
                        fi.SetValue(this, br.ReadByte());
                    else if (t == typeof(short))
                        fi.SetValue(this, br.ReadInt16());
                    else if (t == typeof(int))
                        fi.SetValue(this, br.ReadInt32());
                    else if (t == typeof(long))
                        fi.SetValue(this, br.ReadInt64());
                    else
                    {
                        MessageBox.Show("Unable to read this enum type! Type: " + t.ToString());
                    }
                }
                else if (fi.FieldType == typeof(byte[]))
                {
                    int size = 0;
                    object[] attributes = fi.GetCustomAttributes(typeof(SizeAttribute), true);
                    if (attributes.Length > 0)
                        size = ((SizeAttribute)attributes[0]).Size;

                    fi.SetValue(this, br.ReadBytes(size));
                }
                else if (fi.FieldType == typeof(char[]))
                {
                    int size = 0;
                    object[] attributes = fi.GetCustomAttributes(typeof(SizeAttribute), true);
                    if (attributes.Length > 0)
                        size = ((SizeAttribute)attributes[0]).Size;
                    fi.SetValue(this, br.ReadChars(size));
                }
                else if (fi.FieldType == typeof(string))
                {
                    int size = 32;
                    StringType st = StringType.Ascii;
                    object[] attributes = fi.GetCustomAttributes(typeof(StringAttribute), true);
                    if (attributes.Length > 0)
                    {
                        size = ((StringAttribute)attributes[0]).Size;
                        st = ((StringAttribute)attributes[0]).StringType;
                    }
                    string temp = "";

                    if (st == StringType.Ascii)
                    {
                        ASCIIEncoding ae = new ASCIIEncoding();
                        temp = ae.GetString(br.ReadBytes(size)).Replace("\0", "");
                    }
                    else
                        temp = br.ReadUnicodeString(size);

                    fi.SetValue(this, temp);
                }
                else if (fi.FieldType == typeof(Bitmask8))
                {
                    string[] options = null;

                    object[] attributes = fi.GetCustomAttributes(typeof(OptionsAttribute), true);
                    if (attributes.Length > 0)
                    {
                        options = ((OptionsAttribute)attributes[0]).Options;
                    }

                    object bm = Activator.CreateInstance(fi.FieldType, new object[] { br, options });
                    fi.SetValue(this, bm);
                }
                else if (fi.FieldType == typeof(Bitmask16))
                {
                    string[] options = null;

                    object[] attributes = fi.GetCustomAttributes(typeof(OptionsAttribute), true);
                    if (attributes.Length > 0)
                    {
                        options = ((OptionsAttribute)attributes[0]).Options;
                    }

                    object bm = Activator.CreateInstance(fi.FieldType, new object[] { br, options });
                    fi.SetValue(this, bm);
                }
                else if (fi.FieldType == typeof(Bitmask32))
                {
                    string[] options = null;

                    object[] attributes = fi.GetCustomAttributes(typeof(OptionsAttribute), true);
                    if (attributes.Length > 0)
                    {
                        options = ((OptionsAttribute)attributes[0]).Options;
                    }

                    object bm = Activator.CreateInstance(fi.FieldType, new object[] { br, options });
                    fi.SetValue(this, bm);
                }
                else if (fi.FieldType == typeof(StringID))
                {
                    object strID = Activator.CreateInstance(fi.FieldType, new object[] { br, map });
                    fi.SetValue(this, strID);
                }
                else if (fi.FieldType == typeof(TagReference))
                {
                    TagReference t = (TagReference)fi.GetValue(this);
                    t.TagClass = new string(br.ReadChars(4));
                    t.Unknown = br.ReadBytes(8);
                    t.Ident = br.ReadInt16();
                    t.Index = br.ReadInt16();
                    fi.SetValue(this, t);
                }
                /*else if (fi.FieldType.IsGenericType && fi.FieldType.GetGenericTypeDefinition() == typeof(H3Reflexive<>))
                {
                    IList list = (IList)fi.GetValue(this);
                    PropertyInfo[] pi = list.GetType().GetProperties();
                    list.GetType().GetProperty("ChunkCount").SetValue(list, br.ReadInt32(), null);
                    list.GetType().GetProperty("Pointer").SetValue(list, br.ReadUInt32(), null);
                    br.BaseStream.Position += 4;
                    fi.SetValue(this, list);
                }
                else
                {
                    MessageBox.Show("Unable to read this datatype! Type: " + fi.FieldType.ToString());
                }
            }

            foreach (FieldInfo fi in fields)
            {
                if (fi.FieldType.IsGenericType && fi.FieldType.GetGenericTypeDefinition() == typeof(H3Reflexive<>))
                {
                    //Get our reflex value
                    IList list = (IList)fi.GetValue(this);
                    //If reflex is not null
                    if (list.Count != 0)
                    {
                        //Find our Write method
                        MethodInfo mi = list.GetType().GetMethod("Inject");
                        //This will hold our parameters
                        object[] parameters = new object[1];
                        //Set parameteres
                        parameters[0] = br;
                        //Invoke method
                        mi.Invoke(list, parameters);
                    }

                    fi.SetValue(this, list);
                }
            }
        }*/
    }
}

----------------------------------------------------------------------------------------------------
  ExtraDataTypes.cs
using System;
using System.Collections.Generic;
using System.Text;
using Sandbox.IO;

namespace Sandbox.Data
{
    public class Bitmask8 : Bitmask
    {
        #region Layout
        public byte value;
        #endregion

        public Bitmask8() { }

        public Bitmask8(EndianReader br, string[] option_names)
        {
            base.Read(br);

            Options = option_names;

            GetFlags();
        }
    }

    public class Bitmask16 : Bitmask
    {
        #region Layout
        public short value;
        #endregion

        public Bitmask16(EndianReader br, string[] option_names)
        {
            base.Read(br);

            Options = option_names;

            GetFlags();
        }
    }

    public class Bitmask32 : Bitmask
    {
        #region Layout
        public int value;
        #endregion

        public Bitmask32(EndianReader br, string[] option_names)
        {
            base.Read(br);

            Options = option_names;

            GetFlags();
        }
    }

    public class Bitmask : Chunk
    {
        private string[] options;
        private bool[] flags;

        public override void Read(EndianReader br)
        {
            base.Read(br);
        }

        public override void Write(EndianWriter bw)
        {
            base.Write(bw);
        }

        public string[] Options { get { return options; } set { options = value; } }

        public bool[] Flags { get { return flags; } set { flags = value; } }

        public void GetFlags()
        {
            if (this.GetType().GetField("value").GetValue(this) == typeof(int))
                flags = new bool[32];
            else if (this.GetType().GetField("value").GetValue(this) == typeof(short))
                flags = new bool[16];
            else if (this.GetType().GetField("value").GetValue(this).GetType() == typeof(byte))
                flags = new bool[8];

            uint bit = 1;
            uint temp = Convert.ToUInt32(this.GetType().GetField("value").GetValue(this));
            for (int i = 0; i < flags.Length; i++)
            {
                flags[i] = (bit & temp) == bit ? true : false;
                bit <<= 1;
            }
        }
    }

    /*public class StringID : Chunk
    {
        #region Layout
        public int Index;
        #endregion

        public StringID(EndianReader br, Map.Map Map)
        {
            Read(br);
        }

        public override void Read(EndianReader br)
        {
            base.Read(br);
        }
    }*/
    /// <summary>
    /// Provides functions to Read and Write Halo 3 Tag References
    /// </summary>
    public class TagReference : Chunk
    {
        //Specifies the layout of a Halo3 TagReference we can read it
        #region Layout
        /// <summary>
        /// Specifies type of tag being referenced
        /// </summary>
        public string TagClass;
        /// <summary>
        /// Unknown 8 Byte block of data
        /// </summary>
        [Size(8)]
        public byte[] Unknown;
        /// <summary>
        /// Specifies Identifier used to identify Tag being referenced
        /// </summary>
        public short Ident;
        /// <summary>
        /// Specifies the Index in the Tag table of the tag being referenced
        /// </summary>
        public short Index;
        #endregion
        /// <summary>
        /// What type of ID is this
        /// </summary>
        private IdentType IDType;
        /// <summary>
        /// Creates a new instance of TagReference
        /// </summary>
        public TagReference() { }
        /// <summary>
        /// Creates a new instance of TagReference and reads chunk structure
        /// </summary>
        /// <param name="br">Stream to read from</param>
        public TagReference(EndianReader br, IdentType type)
        {
            IDType = type;
            Read(br);
        }
        /// <summary>
        /// Reads TagReference Chunk structure from stream
        /// </summary>
        /// <param name="br">Stream to read from</param>
        public override void Read(EndianReader br)
        {
            //If Ident is a tag reference
            if (IDType == IdentType.TagReference)
            {
                //Read Tag Class as char array and create a new string
                TagClass = new string(br.ReadChars(4));
                //Read Unknown Data
                Unknown = br.ReadBytes(8);
            }
            //Read Ident
            Ident = br.ReadInt16();
            //Read Index
            Index = br.ReadInt16();
        }
        /// <summary>
        /// Writes TagReference Chunk structure to stream
        /// </summary>
        /// <param name="bw">Stream to write to</param>
        public override void Write(EndianWriter bw)
        {
            //If Ident is a tag reference
            if (IDType == IdentType.TagReference)
            {
                //Write Tag Class as a Char Array
                bw.Write(TagClass.ToCharArray());
                //Write Unknown Data
                bw.Write(Unknown);
            }
            //Write Ident
            bw.Write(Ident);
            //Write Index
            bw.Write(Index);
        }
    }
}

----------------------------------------------------------------------------------------------------
  PluginAttributes.cs
using System;
using System.Collections.Generic;
using System.Text;

namespace Sandbox.Data
{
    public class OptionsAttribute : Attribute
    {
        private string[] options;
        public string[] Options { get { return options; } }
        public OptionsAttribute(string[] optionNames) { options = optionNames; }
    }

    public class IdentAttribute : Attribute
    {
        private IdentType type;
        public IdentType Type { get { return type; } }
        public IdentAttribute(IdentType idType) { type = idType; }
    }

    public enum IdentType
    {
        ID,
        TagReference,
    }

    public class DescriptionAttribute : Attribute
    {
        private string description;
        public string Description { get { return description; } }
        public DescriptionAttribute(string Description) { description = Description; }
    }

    public class SizeAttribute : Attribute
    {
        private int size;
        public int Size { get { return size; } }
        public SizeAttribute(int Size) { size = Size; }
    }

    public class StringAttribute : Attribute
    {
        private int size = 32;
        public int Size { get { return size; } }

        private StringType stringType = StringType.Ascii;
        public StringType StringType
        {
            get { return stringType; }
        }

        public StringAttribute() { }
        public StringAttribute(int Size) { size = Size; }
        public StringAttribute(StringType Type) { stringType = Type; }
        public StringAttribute(StringType Type, int Size) { stringType = Type; size = Size; }
    }

    public enum StringType
    {
        Ascii,
        Unicode,
    }
    /// <summary>
    /// Stores information about a .cs plugin
    /// </summary>
    public class TagAttribute : Attribute
    {        
        private string author;
        /// <summary>
        /// Gets the Author of the plugin
        /// </summary>
        public string Author { get { return author; } }

        private string tagType;
        /// <summary>
        /// Gets the plugin type
        /// </summary>
        public string TagType { get { return tagType; } }

        private double version;
        /// <summary>
        /// Gets the plugin version
        /// </summary>
        public double Version { get { return version; } }

        public TagAttribute(string Author, string TagType, double Version)
        {
            author = Author;
            tagType = TagType;
            version = Version;
        }
    }
}

----------------------------------------------------------------------------------------------------
  PluginComplier.cs
using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.CSharp;
using System.CodeDom.Compiler;
using System.Windows.Forms;
using System.Reflection;

namespace Sandbox.Data
{
    public class pluginCompiler
    {
        public static H3Tag CompileTagPlugin(string TagPath)
        {
            //Create a code provider to do the compile work
            CSharpCodeProvider myCodeProvider = new CSharpCodeProvider();

            //Setup some compiler parameters
            CompilerParameters myCompilerParameters = new CompilerParameters();

            myCompilerParameters.ReferencedAssemblies.Add("System.dll");
            myCompilerParameters.ReferencedAssemblies.Add("System.Windows.Forms.dll");
            myCompilerParameters.ReferencedAssemblies.Add(Application.StartupPath + "\\Halo3Map.dll");

            myCompilerParameters.GenerateExecutable = false;
            myCompilerParameters.GenerateInMemory = false;

            //Compile the script
            CompilerResults results = myCodeProvider.CompileAssemblyFromFile(myCompilerParameters, TagPath);

            //Did we get an error?
            if (results.Errors.Count > 0)
            {
                foreach (CompilerError CompErr in results.Errors)
                {
                    MessageBox.Show("Line number " + CompErr.Line +
                        ", Error Number: " + CompErr.ErrorNumber +
                        ", '" + CompErr.ErrorText + ";" +
                        Environment.NewLine + Environment.NewLine);
                }
                return null;
            }

            //Yay no errors!! Now create a instance of our script class     
            H3Tag tag = null;

            foreach(Type t in results.CompiledAssembly.GetTypes() )
            {
                if(t.BaseType == typeof(H3Tag))
                {
                    tag = (H3Tag)Activator.CreateInstance(t);
                    break;
                }
            }

            return tag;
        }

    }
}

----------------------------------------------------------------------------------------------------
  Tag.cs
using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using System.Xml;

namespace Sandbox.Data
{
    /// <summary>
    /// This is the based class used for all .cs plugins
    /// </summary>
    public class H3Tag : Chunk
    {
        /// <summary>
        /// Holds the name of the plugins Author for this tag
        /// </summary>
        private string author;
        /// <summary>
        /// Retrieves the name of the Authour of this tags plugin
        /// </summary>
        public string Author { get { return author; } }
        /// <summary>
        /// Holds the Tag Type of this tag
        /// </summary>
        private string tagType;
        /// <summary>
        /// Retrieves the Tag Type of this tag
        /// </summary>
        public string TagType { get { return tagType; } }
        /// <summary>
        /// Holds the version of the plugin used to load this tag
        /// </summary>
        private double version;
        /// <summary>
        /// Retrieves the version of the plguin used to load this tag
        /// </summary>
        public double Version { get { return version; } }
        /// <summary>
        /// Stores the offset this tag is stored at in the map
        /// </summary>
        private int mapOffset;
        /// <summary>
        /// Gets or Sets the offset this tag is located in the map
        /// </summary>
        public int MapOffset { get { return mapOffset; } set { mapOffset = value; } }

        public H3Tag()
        {
            object[] attributes = this.GetType().GetCustomAttributes(typeof(TagAttribute), false);
            if (attributes.Length > 0)
            {
                TagAttribute tagA = (TagAttribute)attributes[0];
                author = tagA.Author;
                tagType = tagA.TagType;
                version = tagA.Version;
            }
            else
                MessageBox.Show("There is no information for this tag! Tag: " + this.GetType());
        }

        public override void Read(IO.EndianReader br)
        {
            base.Read(br);
        }

        public void Read(IO.EndianReader br, uint TagOffset)
        {
            Read(br, (int)TagOffset);
        }

        public void Read(IO.EndianReader br, int TagOffset)
        {
            mapOffset = TagOffset;
            br.SeekTo(mapOffset);
            Read(br);
        }

        public override void Write(IO.EndianWriter bw)
        {
            bw.SeekTo(mapOffset);
            base.Write(bw);
        }

        /*public override void Extract(IO.EndianWriter bw, System.Xml.XmlTextWriter xtw)
        {
            xtw.Formatting = Formatting.Indented;

            xtw.WriteStartElement("Tag");
            xtw.WriteAttributeString("Type", this.tagType);
            xtw.WriteAttributeString("Offset", this.mapOffset.ToString());
            xtw.WriteAttributeString("EngineerVersion", "1.1");
            
            base.Extract(bw, xtw);

            xtw.WriteEndElement();
            xtw.Close();
        }

        public override void Inject(IO.EndianReader br)
        {
            base.Inject(br);
            base.Map.IO.Out.SeekTo(mapOffset);
            base.Write(base.Map.IO.Out);
        }*/
    }
}

----------------------------------------------------------------------------------------------------

 >Editor
----------------------------------------------------------------------------------------------------
  PropertyEditor.cs
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Reflection;

namespace Sandbox.Editor
{
    /// <summary>
    /// Displays an objects properties for editing
    /// </summary>
    public partial class PropertyEditor : Form
    {
        private object selectedObject;
        /// <summary>
        /// Creates a new Proper Editor instance.
        /// </summary>
        public PropertyEditor()
        {
            //Initialize for components
            InitializeComponent();
        }
        /// <summary>
        /// Creates a new Proper Editor instance.
        /// </summary>
        /// <param name="selectedObject">Object to edit properties of.</param>
        public PropertyEditor(object selectedObject)
        {
            //Initialize for components
            InitializeComponent();
            //Set forms selected object
            // to the object passed through the parameter
            SelectedObject = selectedObject;
        }
        /// <summary>
        /// Gets or sets the object for which the form displays properties.
        /// </summary>
        public object SelectedObject
        {
            get { return selectedObject; }
            set { selectedObject = value; OnSelectedObjectChange(value); }
        }
        /// <summary>
        /// Updates the property grids selected object when our
        /// forms selected object property is changed.
        /// </summary>
        /// <param name="newObject">New object for which to display properties</param>
        protected void OnSelectedObjectChange(object newObject)
        {
            //Set propertyGrid1's selected object to our new one.
            propertyGrid1.SelectedObject = newObject;
        }

        private void btnOK_Click(object sender, EventArgs e)
        {
            //Close form and return OK dialog result
            DialogResult = DialogResult.OK;
        }
    }
}

----------------------------------------------------------------------------------------------------
  PropertyEditor.Designer.cs
namespace Sandbox.Editor
{
    partial class PropertyEditor
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.propertyGrid1 = new System.Windows.Forms.PropertyGrid();
            this.btnOK = new System.Windows.Forms.Button();
            this.panel1 = new System.Windows.Forms.Panel();
            this.panel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // propertyGrid1
            // 
            this.propertyGrid1.Dock = System.Windows.Forms.DockStyle.Top;
            this.propertyGrid1.Location = new System.Drawing.Point(0, 0);
            this.propertyGrid1.Name = "propertyGrid1";
            this.propertyGrid1.Size = new System.Drawing.Size(287, 253);
            this.propertyGrid1.TabIndex = 0;
            this.propertyGrid1.ToolbarVisible = false;
            // 
            // btnOK
            // 
            this.btnOK.Location = new System.Drawing.Point(200, 6);
            this.btnOK.Name = "btnOK";
            this.btnOK.Size = new System.Drawing.Size(75, 23);
            this.btnOK.TabIndex = 1;
            this.btnOK.Text = "OK";
            this.btnOK.UseVisualStyleBackColor = true;
            this.btnOK.Click += new System.EventHandler(this.btnOK_Click);
            // 
            // panel1
            // 
            this.panel1.BackColor = System.Drawing.SystemColors.ControlLightLight;
            this.panel1.Controls.Add(this.btnOK);
            this.panel1.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.panel1.Location = new System.Drawing.Point(0, 254);
            this.panel1.Name = "panel1";
            this.panel1.Size = new System.Drawing.Size(287, 34);
            this.panel1.TabIndex = 2;
            // 
            // PropertyEditor
            // 
            this.AcceptButton = this.btnOK;
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(287, 288);
            this.Controls.Add(this.panel1);
            this.Controls.Add(this.propertyGrid1);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "PropertyEditor";
            this.ShowInTaskbar = false;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
            this.Text = "Property Editor";
            this.panel1.ResumeLayout(false);
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.PropertyGrid propertyGrid1;
        private System.Windows.Forms.Button btnOK;
        private System.Windows.Forms.Panel panel1;
    }
}

----------------------------------------------------------------------------------------------------
  PropertyEditor.resx (Micrsoft .NET Managed Resource File)
----------------------------------------------------------------------------------------------------
  UIIdentSwapper.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing.Design;
using System.ComponentModel;
using Sandbox.Controls;
using System.Windows.Forms;

namespace Sandbox.Editor
{
    public class UIIdentSwapper : UITypeEditor
    {
        public override UITypeEditorEditStyle GetEditStyle(
            ITypeDescriptorContext context)
        {
            if (context != null)
                return UITypeEditorEditStyle.Modal;

            return UITypeEditorEditStyle.None;
        }

        public override object EditValue(ITypeDescriptorContext context, 
            IServiceProvider provider, object value)
        {            

            if (context == null || provider == null || context.Instance == null)
                return base.EditValue(provider, value);

            IdentSwapDialog isd = new IdentSwapDialog((string)value);
            if (isd.ShowDialog() == DialogResult.OK)
            {
                value = isd.Ident;
            }

            return isd.Ident;
        }
    }
}

----------------------------------------------------------------------------------------------------

 >Forms
----------------------------------------------------------------------------------------------------
  About.cs *(Link Changes Made)
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Diagnostics;

namespace Sandbox.Forms
{
    public partial class About : Form
    {
        public About()
        {
            InitializeComponent();
        }

        private void linkLabel2_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
*           Process.Start("https://www.nexusmods.com/users/98638718");
        }

        private void linkLabel3_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
*           Process.Start("https://reclaimers.net");
        }

        private void linkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
*           Process.Start("https://github.com/bloodyPRAT");
        }
    }
}

----------------------------------------------------------------------------------------------------
  About.Designer.cs *(Link Changes Made) (Author) (Credits)
namespace Sandbox.Forms
{
    partial class About
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(About));
            this.linkLabel1 = new System.Windows.Forms.LinkLabel();
            this.label2 = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.linkLabel2 = new System.Windows.Forms.LinkLabel();
            this.linkLabel3 = new System.Windows.Forms.LinkLabel();
            this.pictureBox1 = new System.Windows.Forms.PictureBox();
            this.label1 = new System.Windows.Forms.Label();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).BeginInit();
            this.SuspendLayout();
            // 
            // linkLabel1
            // 
            this.linkLabel1.AutoSize = true;
            this.linkLabel1.LinkColor = System.Drawing.Color.Black;
            this.linkLabel1.Location = new System.Drawing.Point(176, 99);
            this.linkLabel1.Name = "linkLabel1";
            this.linkLabel1.Size = new System.Drawing.Size(93, 13);
            this.linkLabel1.TabIndex = 1;
            this.linkLabel1.TabStop = true;
*           this.linkLabel1.Text = "github.com/bloodyPRAT";
            this.linkLabel1.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabel1_LinkClicked);
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label2.Location = new System.Drawing.Point(135, 9);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(66, 18);
            this.label2.TabIndex = 2;
            this.label2.Text = "Sandbox";
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(162, 27);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(62, 13);
            this.label3.TabIndex = 3;
*           this.label3.Text = "by Prat";
            // 
            // linkLabel2
            // 
            this.linkLabel2.AutoSize = true;
            this.linkLabel2.LinkColor = System.Drawing.Color.Black;
            this.linkLabel2.Location = new System.Drawing.Point(135, 76);
            this.linkLabel2.Name = "linkLabel2";
            this.linkLabel2.Size = new System.Drawing.Size(79, 13);
            this.linkLabel2.TabIndex = 5;
            this.linkLabel2.TabStop = true;
*           this.linkLabel2.Text = "nexusmods.com/users/98638718";
            this.linkLabel2.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabel2_LinkClicked);
            // 
            // linkLabel3
            // 
            this.linkLabel3.AutoSize = true;
            this.linkLabel3.LinkColor = System.Drawing.Color.Black;
            this.linkLabel3.Location = new System.Drawing.Point(220, 76);
            this.linkLabel3.Name = "linkLabel3";
            this.linkLabel3.Size = new System.Drawing.Size(77, 13);
            this.linkLabel3.TabIndex = 6;
            this.linkLabel3.TabStop = true;
*           this.linkLabel3.Text = "reclaimers.net";
            this.linkLabel3.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabel3_LinkClicked);
            // 
            // pictureBox1
            // 
            this.pictureBox1.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox1.Image")));
            this.pictureBox1.Location = new System.Drawing.Point(12, 12);
            this.pictureBox1.Name = "pictureBox1";
            this.pictureBox1.Size = new System.Drawing.Size(100, 100);
            this.pictureBox1.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.pictureBox1.TabIndex = 4;
            this.pictureBox1.TabStop = false;
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label1.Location = new System.Drawing.Point(135, 53);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(89, 12);
            this.label1.TabIndex = 7;
*           this.label1.Text = "Credits: grimdoomer & Shade45";
            // 
            // About
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(331, 126);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.linkLabel3);
            this.Controls.Add(this.linkLabel2);
            this.Controls.Add(this.pictureBox1);
            this.Controls.Add(this.label3);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.linkLabel1);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "About";
            this.ShowIcon = false;
            this.ShowInTaskbar = false;
            this.Text = "About";
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.LinkLabel linkLabel1;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.PictureBox pictureBox1;
        private System.Windows.Forms.LinkLabel linkLabel2;
        private System.Windows.Forms.LinkLabel linkLabel3;
        private System.Windows.Forms.Label label1;
    }
}

----------------------------------------------------------------------------------------------------
  About.resx
----------------------------------------------------------------------------------------------------
  Form1.cs
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Sandbox.Usermap;
using Sandbox.Forms;
using Sandbox.Controls;
using Sandbox.Editor;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Xml.Serialization;
using Sandbox.Plugins;

namespace Sandbox
{
    public partial class Form1 : Form
    {
        /// <summary>
        /// Current version of application.
        /// </summary>
        public static double CurrentVersion = 3.0;
        /// <summary>
        /// Current release type.
        /// </summary>
        public static BuildType CurrentBuildType = BuildType.Stable;

        /// <summary>
        /// Defines release types of the application.
        /// </summary>
        public enum BuildType
        {
            Internal_Release,
            Stable,
            Unstable,
            Beta,
        }

        public Form1()
        {
            InitializeComponent();
            //AppSettings.settingsDirectory = Application.StartupPath;
            //AppSettings.LoadSettings();
            LoadImages();                   
        }
        /// <summary>
        /// Loads images from the image folder into 
        ///  the images lists in the global variables class
        /// </summary>
        public void LoadImages()
        {
            GlobalVariables.ImageIcons = new ImageList();
            GlobalVariables.ImageIcons.ImageSize = new Size(64, 64);
            GlobalVariables.SmallImageIcons = new ImageList();
            GlobalVariables.SmallImageIcons.ImageSize = new Size(32, 32);
            DirectoryInfo di = new DirectoryInfo(Application.StartupPath + "\\Images");
            FileInfo[] fi = di.GetFiles();
            for(int i = 0; i < fi.Length; i++)
            {
                Image im = Image.FromFile(fi[i].FullName);
                GlobalVariables.ImageIcons.Images.Add(im);
                GlobalVariables.ImageIcons.Images.SetKeyName(i, fi[i].Name.Replace(".png", ""));
                GlobalVariables.SmallImageIcons.Images.Add(im);
                GlobalVariables.SmallImageIcons.Images.SetKeyName(i, fi[i].Name.Replace(".png", ""));
            }
        }

        private void openMToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog ofd = new OpenFileDialog();
            ofd.Title = "Select a Halo 3 usermap...";
            ofd.Filter = "Map Varients (.map)|*.map";
            if (ofd.ShowDialog() == DialogResult.OK)
            {
                GlobalVariables.Usermap = new H3Usermap(ofd.FileName);

                int error = GlobalVariables.Usermap.Read();

                if (error == 0)
                {

                }
                else if (error == 1)
                {
                    MessageBox.Show("You must extract the usermap from the con file before opening.");
                    return;
                }
                else if (error == 2)
                {
                    MessageBox.Show("File was not a usermap.", "Error incorrect format.", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;

                }
                else if (error == 3)
                {
                    MessageBox.Show("An error was encountered reading this usermap.", "Error reading file.", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                string path = Misc.GetPluginName((int)GlobalVariables.Usermap.header.MapId);
                if (File.Exists(path))
                {
                    GlobalVariables.Plugin = new MapPlugin(path);
                }
                else
                {
                    MessageBox.Show("Could not find a plugin for this usermap.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                //Load items into listview
                listpanel1.Populate();
            }
        }

        private void settingsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            PropertyEditor pe = new PropertyEditor();
            pe.SelectedObject = AppSettings.Settings;
            pe.FormClosing += new FormClosingEventHandler(settings_FormClosing);
            pe.Text = "Settings";
            pe.ShowDialog();
        }

        void settings_FormClosing(object sender, FormClosingEventArgs e)
        {
            AppSettings.SaveSettings();
        }

        private void aboutToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            //Create new about menu dialog
            About ab = new About();
            //Show about menu dialog
            ab.ShowDialog();
        } 

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //Close application and all open forms
            Application.Exit();
        }

        private void closeUsermapToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //Close usermap file io
            GlobalVariables.Usermap.Close();
            //Clear listview items
            listpanel1.Clear();
        }
    }
    /// <summary>
    /// Holds variables that need to be accessable from anywhere.
    /// </summary>
    public static class GlobalVariables
    {
        private static MapPlugin plugin;
        private static H3Usermap umap;
        private static object clipboard;        
        private static ImageList imageIcons;
        private static ImageList smallImageIcons;
        /// <summary>
        /// Gives info about the map file for the currently open usermap
        /// </summary>
        public static MapPlugin Plugin
        {
            get { return plugin; }
            set { plugin = value; }
        }
        /// <summary>
        /// Reads, Writes, and Holds information for the usermap being edited.
        /// </summary>
        public static H3Usermap Usermap
        {
            get { return umap; }
            set { umap = value; }
        }
        /// <summary>
        /// Holds a placement block for copy/paste functions.
        /// </summary>
        public static object Clipboard
        {
            get { return clipboard; }
            set { clipboard = value; }
        }
        /// <summary>
        /// Lists all the large Icons for use with the listview
        /// </summary>
        public static ImageList ImageIcons
        {
            get { return imageIcons; }
            set { imageIcons = value; }
        }
        /// <summary>
        /// Lists all the small Icons for use with the listview
        /// </summary>
        public static ImageList SmallImageIcons
        {
            get { return smallImageIcons; }
            set { smallImageIcons = value; }
        }
    }
}

----------------------------------------------------------------------------------------------------
  Form1.Designer.cs
namespace Sandbox
{
    partial class Form1
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Form1));
            this.menuStrip1 = new System.Windows.Forms.MenuStrip();
            this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openMToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.closeUsermapToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator6 = new System.Windows.Forms.ToolStripSeparator();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.settingsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.aboutToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.listpanel1 = new Sandbox.Controls.ListpanelV2();
            this.menuStrip1.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip1
            // 
            this.menuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileToolStripMenuItem,
            this.toolsToolStripMenuItem,
            this.helpToolStripMenuItem});
            this.menuStrip1.Location = new System.Drawing.Point(0, 0);
            this.menuStrip1.Name = "menuStrip1";
            this.menuStrip1.Size = new System.Drawing.Size(514, 24);
            this.menuStrip1.TabIndex = 3;
            this.menuStrip1.Text = "menuStrip1";
            // 
            // fileToolStripMenuItem
            // 
            this.fileToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.openMToolStripMenuItem,
            this.closeUsermapToolStripMenuItem,
            this.toolStripSeparator6,
            this.exitToolStripMenuItem});
            this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
            this.fileToolStripMenuItem.Size = new System.Drawing.Size(37, 20);
            this.fileToolStripMenuItem.Text = "File";
            // 
            // openMToolStripMenuItem
            // 
            this.openMToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject("openMToolStripMenuItem.Image")));
            this.openMToolStripMenuItem.Name = "openMToolStripMenuItem";
            this.openMToolStripMenuItem.Size = new System.Drawing.Size(162, 22);
            this.openMToolStripMenuItem.Text = "Open Usermap...";
            this.openMToolStripMenuItem.Click += new System.EventHandler(this.openMToolStripMenuItem_Click);
            // 
            // closeUsermapToolStripMenuItem
            // 
            this.closeUsermapToolStripMenuItem.Name = "closeUsermapToolStripMenuItem";
            this.closeUsermapToolStripMenuItem.Size = new System.Drawing.Size(162, 22);
            this.closeUsermapToolStripMenuItem.Text = "Close Usermap";
            this.closeUsermapToolStripMenuItem.Click += new System.EventHandler(this.closeUsermapToolStripMenuItem_Click);
            // 
            // toolStripSeparator6
            // 
            this.toolStripSeparator6.Name = "toolStripSeparator6";
            this.toolStripSeparator6.Size = new System.Drawing.Size(159, 6);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = "exitToolStripMenuItem";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(162, 22);
            this.exitToolStripMenuItem.Text = "Exit";
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.exitToolStripMenuItem_Click);
            // 
            // toolsToolStripMenuItem
            // 
            this.toolsToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.settingsToolStripMenuItem});
            this.toolsToolStripMenuItem.Name = "toolsToolStripMenuItem";
            this.toolsToolStripMenuItem.Size = new System.Drawing.Size(48, 20);
            this.toolsToolStripMenuItem.Text = "Tools";
            this.toolsToolStripMenuItem.Visible = false;
            // 
            // settingsToolStripMenuItem
            // 
            this.settingsToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject("settingsToolStripMenuItem.Image")));
            this.settingsToolStripMenuItem.Name = "settingsToolStripMenuItem";
            this.settingsToolStripMenuItem.Size = new System.Drawing.Size(152, 22);
            this.settingsToolStripMenuItem.Text = "Settings";
            this.settingsToolStripMenuItem.Click += new System.EventHandler(this.settingsToolStripMenuItem_Click);
            // 
            // helpToolStripMenuItem
            // 
            this.helpToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.aboutToolStripMenuItem1});
            this.helpToolStripMenuItem.Name = "helpToolStripMenuItem";
            this.helpToolStripMenuItem.Size = new System.Drawing.Size(44, 20);
            this.helpToolStripMenuItem.Text = "Help";
            // 
            // aboutToolStripMenuItem1
            // 
            this.aboutToolStripMenuItem1.Image = ((System.Drawing.Image)(resources.GetObject("aboutToolStripMenuItem1.Image")));
            this.aboutToolStripMenuItem1.Name = "aboutToolStripMenuItem1";
            this.aboutToolStripMenuItem1.Size = new System.Drawing.Size(107, 22);
            this.aboutToolStripMenuItem1.Text = "About";
            this.aboutToolStripMenuItem1.Click += new System.EventHandler(this.aboutToolStripMenuItem1_Click);
            // 
            // listpanel1
            // 
            this.listpanel1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.listpanel1.Location = new System.Drawing.Point(0, 24);
            this.listpanel1.Name = "listpanel1";
            this.listpanel1.Size = new System.Drawing.Size(514, 453);
            this.listpanel1.TabIndex = 9;
            // 
            // Form1
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.BackColor = System.Drawing.SystemColors.Control;
            this.ClientSize = new System.Drawing.Size(514, 477);
            this.Controls.Add(this.listpanel1);
            this.Controls.Add(this.menuStrip1);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.MainMenuStrip = this.menuStrip1;
            this.MaximizeBox = false;
            this.Name = "Form1";
            this.Text = "Sandbox 3.0";
            this.menuStrip1.ResumeLayout(false);
            this.menuStrip1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.MenuStrip menuStrip1;
        private System.Windows.Forms.ToolStripMenuItem fileToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem openMToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem toolsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem settingsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem aboutToolStripMenuItem1;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator6;
        private Sandbox.Controls.ListpanelV2 listpanel1;
        private System.Windows.Forms.ToolStripMenuItem closeUsermapToolStripMenuItem;
    }
}

----------------------------------------------------------------------------------------------------
  Form1.resx
----------------------------------------------------------------------------------------------------
  StartupScreen.cs
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace Sandbox.Forms
{
    public partial class StartupScreen : Form
    {
        private int splashDuration;

        public StartupScreen()
        {
            InitializeComponent();
            lblVersion.Text = "V " + Form1.CurrentVersion.ToString("N1");
        }

        public int SplashDuration
        {
            get { return splashDuration; }
            set { splashDuration = value; }
        }

        public void StartTimer()
        {
            Timer t = new Timer();
            t.Interval = splashDuration;
            t.Tick += new EventHandler(t_Tick);
            t.Start();
        }

        void t_Tick(object sender, EventArgs e)
        {
            this.Close();            
        }
    }
}

----------------------------------------------------------------------------------------------------
  StartupScreen.Designer.cs
namespace Sandbox.Forms
{
    partial class StartupScreen
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(StartupScreen));
            this.lblVersion = new System.Windows.Forms.Label();
            this.label1 = new System.Windows.Forms.Label();
            this.SuspendLayout();
            // 
            // lblVersion
            // 
            this.lblVersion.AutoSize = true;
            this.lblVersion.BackColor = System.Drawing.Color.Transparent;
            this.lblVersion.Font = new System.Drawing.Font("Estrangelo Edessa", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblVersion.ForeColor = System.Drawing.Color.White;
            this.lblVersion.Location = new System.Drawing.Point(240, 271);
            this.lblVersion.Name = "lblVersion";
            this.lblVersion.Size = new System.Drawing.Size(48, 20);
            this.lblVersion.TabIndex = 3;
            this.lblVersion.Text = "V 1.0";
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.BackColor = System.Drawing.Color.Transparent;
            this.label1.Font = new System.Drawing.Font("Estrangelo Edessa", 14.25F);
            this.label1.ForeColor = System.Drawing.Color.White;
            this.label1.Location = new System.Drawing.Point(12, 271);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(76, 20);
            this.label1.TabIndex = 4;
*           this.label1.Text = "Prat";
            // 
            // StartupScreen
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.BackgroundImage = ((System.Drawing.Image)(resources.GetObject("$this.BackgroundImage")));
            this.ClientSize = new System.Drawing.Size(300, 300);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.lblVersion);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;
            this.Name = "StartupScreen";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "StartupScreen";
            this.TopMost = true;
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label lblVersion;
        private System.Windows.Forms.Label label1;
    }
}

----------------------------------------------------------------------------------------------------
  StartupScreen.resx
----------------------------------------------------------------------------------------------------

 >IO
----------------------------------------------------------------------------------------------------
  IO.cs
using System;
using System.Collections.Generic;
using System.IO;

namespace Sandbox.IO
{
    public enum EndianType
    {
        BigEndian,
        LittleEndian
    }
    public class EndianIO
    {

        private bool isfile = false;
        private bool isOpen = false;
        private Stream stream = null;
        private string filepath = "";
        private EndianType endiantype = EndianType.LittleEndian;

        private EndianReader _in = null;
        private EndianWriter _out = null;

        public bool Opened { get { return isOpen; } }
        public bool Closed { get { return !isOpen; } }
        public EndianReader In { get { return _in; } }
        public EndianWriter Out { get { return _out; } }
        public Stream Stream { get { return stream; } }

        public EndianIO(string FilePath, EndianType EndianStyle)
        {
            this.endiantype = EndianStyle;
            this.filepath = FilePath;
            this.isfile = true;
        }
        public EndianIO(MemoryStream MemoryStream, EndianType EndianStyle)
        {
            this.endiantype = EndianStyle;
            this.stream = MemoryStream;
            this.isfile = false;
        }
        public EndianIO(Stream Stream, EndianType EndianStyle)
        {
            this.endiantype = EndianStyle;
            this.stream = Stream;
            this.isfile = false;
        }
        public EndianIO(byte[] Buffer, EndianType EndianStyle)
        {
            this.endiantype = EndianStyle;
            this.stream = new MemoryStream(Buffer);
            this.isfile = false;
        }

        public void SeekTo(int offset)
        {
            SeekTo(offset, SeekOrigin.Begin);
        }
        public void SeekTo(uint offset)
        {
            SeekTo((int)offset, SeekOrigin.Begin);
        }
        public void SeekTo(int offset, SeekOrigin SeekOrigin)
        {
            stream.Seek(offset, SeekOrigin);
        }

        public void Open()
        {
            if (isOpen == true)
                return;

            if (isfile)
                stream = new FileStream(filepath, FileMode.OpenOrCreate, FileAccess.ReadWrite);

            _in = new EndianReader(stream, endiantype);
            _out = new EndianWriter(stream, endiantype);

            isOpen = true;
        }
        public void Close()
        {
            if (isOpen == false)
                return;

            stream.Close();
            _in.Close();
            _out.Close();

            isOpen = false;
        }

    }

    public class EndianReader : BinaryReader
    {

        public EndianType endianstyle;

        public EndianReader(Stream stream, EndianType endianstyle)
            : base(stream)
        {
            this.endianstyle = endianstyle;
        }

        public void SeekTo(int offset)
        {
            SeekTo(offset, SeekOrigin.Begin);
        }

        public void SeekTo(uint offset)
        {
            SeekTo((int)offset, SeekOrigin.Begin);
        }

        public void SeekTo(long offset)
        {
            SeekTo((int)offset, SeekOrigin.Begin);
        }

        public void SeekTo(int offset, SeekOrigin SeekOrigin)
        {
            this.BaseStream.Seek((int)offset, SeekOrigin);
        }

        public override short ReadInt16()
        {
            return ReadInt16(endianstyle);
        }
        public short ReadInt16(EndianType EndianType)
        {
            byte[] buffer = base.ReadBytes(2);

            if (EndianType == EndianType.BigEndian)
                Array.Reverse(buffer);

            return BitConverter.ToInt16(buffer, 0);
        }

        public override ushort ReadUInt16()
        {
            return ReadUInt16(endianstyle);
        }
        public ushort ReadUInt16(EndianType EndianType)
        {
            byte[] buffer = base.ReadBytes(2);

            if (EndianType == EndianType.BigEndian)
                Array.Reverse(buffer);

            return BitConverter.ToUInt16(buffer, 0);
        }

        public override int ReadInt32()
        {
            return ReadInt32(endianstyle);
        }
        public int ReadInt32(EndianType EndianType)
        {
            byte[] buffer = base.ReadBytes(4);

            if (EndianType == EndianType.BigEndian)
                Array.Reverse(buffer);

            return BitConverter.ToInt32(buffer, 0);
        }

        public override uint ReadUInt32()
        {
            return ReadUInt32(endianstyle);
        }
        public uint ReadUInt32(EndianType EndianType)
        {
            byte[] buffer = base.ReadBytes(4);

            if (EndianType == EndianType.BigEndian)
                Array.Reverse(buffer);

            return BitConverter.ToUInt32(buffer, 0);
        }

        public override long ReadInt64()
        {
            return ReadInt64(endianstyle);
        }
        public long ReadInt64(EndianType EndianType)
        {
            byte[] buffer = base.ReadBytes(8);

            if (EndianType == EndianType.BigEndian)
                Array.Reverse(buffer);

            return BitConverter.ToInt64(buffer, 0);
        }

        public override ulong ReadUInt64()
        {
            return ReadUInt64(endianstyle);
        }
        public ulong ReadUInt64(EndianType EndianType)
        {
            byte[] buffer = base.ReadBytes(8);

            if (EndianType == EndianType.BigEndian)
                Array.Reverse(buffer);

            return BitConverter.ToUInt64(buffer, 0);
        }

        public override float ReadSingle()
        {
            return ReadSingle(endianstyle);
        }
        public float ReadSingle(EndianType EndianType)
        {
            byte[] buffer = base.ReadBytes(4);

            if (EndianType == EndianType.BigEndian)
                Array.Reverse(buffer);

            return BitConverter.ToSingle(buffer, 0);
        }

        public override double ReadDouble()
        {
            return ReadDouble(endianstyle);
        }
        public double ReadDouble(EndianType EndianType)
        {
            byte[] buffer = base.ReadBytes(4);

            if (EndianType == EndianType.BigEndian)
                Array.Reverse(buffer);

            return BitConverter.ToDouble(buffer, 0);
        }

        public string ReadNullTerminatedString()
        {
            string newString = "";
            char temp;
            while ((temp = ReadChar()) != '\0')
            {
                if (temp != '\0') newString += temp;
                else break;
            }
            return newString;
        }

        public string ReadAsciiString(int Length)
        {
            return ReadAsciiString(Length, endianstyle);
        }
        public string ReadAsciiString(int Length, EndianType EndianType)
        {
            string newString = "";
            int howMuch = 0;
            for (int x = 0; x < Length; x++)
            {
                char tempChar = (char)ReadByte();
                howMuch++;
                if (tempChar != '\0')
                    newString += tempChar;
                else
                    break;
            }

            int size = (Length - howMuch) * sizeof(byte);
            BaseStream.Seek(size, SeekOrigin.Current);

            return newString;
        }

        public string ReadUnicodeString(int Length)
        {
            return ReadUnicodeString(Length, endianstyle);
        }
        public string ReadUnicodeString(int Length, EndianType EndianType)
        {
            string newString = "";
            int howMuch = 0;
            for (int x = 0; x < Length; x++)
            {
                char tempChar = (char)ReadUInt16(EndianType);
                howMuch++;
                if (tempChar != '\0')
                    newString += tempChar;
                else
                    break;
            }

            int size = (Length - howMuch) * sizeof(UInt16);
            BaseStream.Seek(size, SeekOrigin.Current);

            return newString;
        }

        public string ReadString(int Length)
        {
            return ReadAsciiString(Length);
        }

        public int ReadInt24()
        {
            return ReadInt24(endianstyle);
        }
        public int ReadInt24(EndianType EndianType)
        {
            byte[] buffer = base.ReadBytes(3);
            byte[] dest = new byte[0x04];

            Array.Copy(buffer, 0, dest, 0, 3);

            if (EndianType == EndianType.BigEndian)
                Array.Reverse(dest);

            return BitConverter.ToInt32(dest, 0);
        }

    }

    public class EndianWriter : BinaryWriter
    {

        EndianType endianstyle;

        public EndianWriter(Stream stream, EndianType endianstyle)
            : base(stream)
        {
            this.endianstyle = endianstyle;
        }

        public void SeekTo(int offset)
        {
            SeekTo(offset, SeekOrigin.Begin);
        }

        public void SeekTo(uint offset)
        {
            SeekTo((int)offset, SeekOrigin.Begin);
        }

        public void SeekTo(long offset)
        {
            SeekTo((int)offset, SeekOrigin.Begin);
        }

        public void SeekTo(int offset, SeekOrigin SeekOrigin)
        {
            this.BaseStream.Seek((int)offset, SeekOrigin);
        }

        public override void Write(short value)
        {
            Write(value, endianstyle);
        }
        public void Write(short value, EndianType EndianType)
        {
            byte[] buffer = BitConverter.GetBytes(value);
            if (EndianType == EndianType.BigEndian)
                Array.Reverse(buffer);

            base.Write(buffer);
        }

        public override void Write(ushort value)
        {
            Write(value, endianstyle);
        }
        public void Write(ushort value, EndianType EndianType)
        {
            byte[] buffer = BitConverter.GetBytes(value);
            if (EndianType == EndianType.BigEndian)
                Array.Reverse(buffer);

            base.Write(buffer);
        }

        public override void Write(int value)
        {
            Write(value, endianstyle);
        }
        public void Write(int value, EndianType EndianType)
        {
            byte[] buffer = BitConverter.GetBytes(value);
            if (EndianType == EndianType.BigEndian)
                Array.Reverse(buffer);

            base.Write(buffer);
        }

        public override void Write(uint value)
        {
            Write(value, endianstyle);
        }
        public void Write(uint value, EndianType EndianType)
        {
            byte[] buffer = BitConverter.GetBytes(value);
            if (EndianType == EndianType.BigEndian)
                Array.Reverse(buffer);

            base.Write(buffer);
        }

        public override void Write(long value)
        {
            Write(value, endianstyle);
        }
        public void Write(long value, EndianType EndianType)
        {
            byte[] buffer = BitConverter.GetBytes(value);
            if (EndianType == EndianType.BigEndian)
                Array.Reverse(buffer);

            base.Write(buffer);
        }

        public override void Write(ulong value)
        {
            Write(value, endianstyle);
        }
        public void Write(ulong value, EndianType EndianType)
        {
            byte[] buffer = BitConverter.GetBytes(value);
            if (EndianType == EndianType.BigEndian)
                Array.Reverse(buffer);

            base.Write(buffer);
        }

        public override void Write(float value)
        {
            Write(value, endianstyle);
        }
        public void Write(float value, EndianType EndianType)
        {
            byte[] buffer = BitConverter.GetBytes(value);
            if (EndianType == EndianType.BigEndian)
                Array.Reverse(buffer);

            base.Write(buffer);
        }

        public override void Write(double value)
        {
            Write(value, endianstyle);
        }
        public void Write(double value, EndianType EndianType)
        {
            byte[] buffer = BitConverter.GetBytes(value);
            if (EndianType == EndianType.BigEndian)
                Array.Reverse(buffer);

            base.Write(buffer);
        }

        public void WriteAsciiString(string String, int Length)
        {
            WriteAsciiString(String, Length, endianstyle);
        }
        public void WriteAsciiString(string String, int Length, EndianType EndianType)
        {
            int strLen = String.Length;
            for (int x = 0; x < strLen; x++)
            {
                if (x > Length)
                    break;//just incase they pass a huge string

                byte val = (byte)String[x];
                Write(val);
            }

            int nullSize = (Length - strLen) * sizeof(byte);
            if (nullSize > 0)
                Write(new byte[nullSize]);
        }

        public void WriteUnicodeString(string String, int Length)
        {
            WriteUnicodeString(String, Length, endianstyle);
        }
        public void WriteUnicodeString(string String, int Length, EndianType EndianType)
        {
            int strLen = String.Length;
            for (int x = 0; x < strLen; x++)
            {
                if (x > Length)
                    break;//just incase they pass a huge string

                ushort val = (ushort)String[x];
                Write(val, EndianType);
            }

            int nullSize = (Length - strLen) * sizeof(ushort);
            if (nullSize > 0)
                Write(new byte[nullSize]);
        }

    }
}
----------------------------------------------------------------------------------------------------

 >obj
  >Debug
   >Refactor
   >TempPE
    Properties.Resources.Designer.cs.dll
   Sandbox.Controls.IdentSwapDialog.resources
   Sandbox.Controls.Info.resources
   Sandbox.Controls.ListpanelV2.resources
   Sandbox.Controls.SuccessMessage.resources
   Sandbox.csproj.FileListAbsolute.txt
   Sandbox.csproj.GenerateResource.Cache
   Sandbox.Editor.PropertyEditor.resources
   Sandbox.exe
   Sandbox.Form1.resources
   Sandbox.Forms.About.resources
   Sandbox.Forms.StartupScreen.resources
   Sandbox.pdb
   Sandbox.Properties.Resources.resources
  >Release
      >Refactor
   >TempPE
    Properties.Resources.Designer.cs.dll
   Sandbox.Controls.IdentSwapDialog.resources
   Sandbox.Controls.Info.resources
   Sandbox.Controls.ListpanelV2.resources
   Sandbox.Controls.SuccessMessage.resources
   Sandbox.csproj.FileListAbsolute.txt
   Sandbox.csproj.GenerateResource.Cache
   Sandbox.Editor.PropertyEditor.resources
   Sandbox.exe
   Sandbox.Form1.resources
   Sandbox.Forms.About.resources
   Sandbox.Forms.StartupScreen.resources
   Sandbox.pdb
   Sandbox.Properties.Resources.resources

 >Plugin
----------------------------------------------------------------------------------------------------
  MapDefinition.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.IO;
using System.Windows.Forms;

namespace Sandbox.Plugin
{
    public class MapDefinition
    {
        private string mapName;
        private string mapFilename;
        private int mapId;

        //private string varientAuthor;
        //private string varientName;
        //private string varientDescription;

        public List<TagDefinition> TagDefinitions;

        public MapDefinition(int mapId)
        {
            this.mapId = mapId;          
        }

        public string MapName
        {
            get { return mapName; }
        }

        public string MapFilename
        {
            get { return mapFilename; }
        }

        public int MapID
        {
            get { return mapId; }
        }        

        public int Read()
        {           
            string pluginPath = Application.StartupPath + "\\Map Definitions\\" + PluginHandler.GetPlugin(mapId);

            if(!File.Exists(pluginPath))
                return 1;

            XmlDocument plugin = new XmlDocument();
            plugin.Load(pluginPath);            
            XmlElement root = plugin.DocumentElement;

            XmlNode temp = root.SelectSingleNode("//Map//name");
            mapName = temp.InnerText;

            temp = root.SelectSingleNode("//Map//filename");
            mapFilename = temp.InnerText;

            temp = root.SelectSingleNode("//Map/id");
            int id = int.Parse(temp.InnerText);

            if (id != mapId)
                return 2;

            temp = root.SelectSingleNode("//Map//objects");
            TagDefinitions = new List<TagDefinition>();

            foreach (XmlNode node in temp)
            {
                TagDefinition t = new TagDefinition();
                t.TagClass = node.Attributes["class"].Value;
                t.Name = node.Attributes["name"].Value;
                t.FileName = node.Attributes["filename"].Value;
                t.Ident = int.Parse(node.Attributes["ident"].Value);
                t.BitmapLocation = node.Attributes["image"].Value;
                TagDefinitions.Add(t);
            }

            return 0;
        }
    }

    public class TagDefinition
    {
        private string tagClass;
        private string name;
        private string filename;
        private string ident;
        private string bitmapPath;

        public string TagClass
        {
            get { return tagClass; }
            set { tagClass = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public string FileName
        {
            get { return filename; }
            set { filename = value; }
        }

        public int Ident
        {
            get { return int.Parse(ident); }
            set { ident = value.ToString(); }
        }

        public string BitmapLocation
        {
            get { return bitmapPath; }
            set { bitmapPath = value; }
        }
    }
}

----------------------------------------------------------------------------------------------------
  PluginHandler.cs (Important Changes Made)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Sandbox.Plugin
{
    public static class PluginHandler
    {
        /// <summary>
        /// Uses the map id Retrieve its corresponding plugins path
        /// </summary>
        /// <param name="mapId">Id of map</param>
        /// <returns>Plugin filepath</returns>
        public static string GetPlugin(int mapId)
        {
            switch (mapId)
            {
                case 30: return "zanzibar.xml";
*               case 31: return "s3d_turf.xml";
                case 300: return "construct.xml";
                case 310: return "deadlock.xml";
                case 320: return "guardian.xml";
                case 330: return "isolation.xml";
                case 340: return "riverworld.xml";
                case 350: return "salvation.xml";
                case 360: return "snowbound.xml";
                case 380: return "chill.xml";
                case 390: return "cyberdyne.xml";
                case 400: return "shrine.xml";
                case 410: return "bunkerworld.xml";
*               case 440: return "docks.xml";
*               case 470: return "sidewinder.xml";
                case 480: return "warehouse.xml";
*               case 490: return "descent.xml";
*               case 500: return "spacecamp.xml";
*               case 520: return "lockout.xml";
                case 580: return "armory.xml";
*               case 590: return "ghosttown.xml";
*               case 600: return "chillout.xml";
*               case 703: return "s3d_edge.xml";
*               case 706: return "s3d_waterfall.xml";
*               case 720: return "midship.xml";
*               case 730: return "sandbox.xml";
*               case 740: return "fortress.xml";
            }

            return null;
        }
    }
}

----------------------------------------------------------------------------------------------------

 >Plugins
----------------------------------------------------------------------------------------------------
  MapPlugin.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.IO;

namespace Sandbox.Plugins
{
    public class MapPlugin
    {
        public List<Tag> Tags;
        public List<string> TagClasses;

        public MapPlugin(string path)
        {
            Tags = new List<Tag>();
            TagClasses = new List<string>();

            XmlTextReader xtr = new XmlTextReader(new FileStream(path, FileMode.Open));
            while (xtr.Read())
            {
                switch (xtr.NodeType)
                {
                    case XmlNodeType.Element:
                        if (xtr.Name == "Tag")
                        {
                            Tag t = new Tag();
                            t.Type = xtr.GetAttribute("Class");
                            bool exist = false;
                            foreach (string s in TagClasses)
                                if (s.Equals(t.Type))
                                    exist = true;
                            if (exist == false)
                                TagClasses.Add(t.Type);
                            t.Filename = xtr.GetAttribute("Path");
                            t.Ident = Convert.ToInt32(xtr.GetAttribute("Ident"));
                            Tags.Add(t);
                        } 
                        break;
                }
            }
        }

        public string GetTagNameFromID(int id)
        {
            foreach (Tag t in Tags)
            {
                if (t.Ident == id)
                {
                    return t.Filename;
                }
            }

            return null;
        }

        public string GetTagTypeFromID(int id)
        {
            foreach (Tag t in Tags)
            {
                if (t.Ident == id)
                {
                    return t.Type;
                }
            }

            return null;
        }

        public int GetIDFromTagName(string filename)
        {
            foreach (Tag t in Tags)
            {
                if (t.Filename == filename)
                {
                    return t.Ident;
                }
            }

            return -1;
        }

        public struct Tag
        {
           public string Type;
           public string Filename;
           public int Ident;
        }
    } 
}

----------------------------------------------------------------------------------------------------

 >Properties
----------------------------------------------------------------------------------------------------
  AssemblyInfo.cs
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Sandbox")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Hewlett-Packard Company")]
[assembly: AssemblyProduct("Sandbox")]
[assembly: AssemblyCopyright("Copyright © Hewlett-Packard Company 2008")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("b51364c7-6303-4ff6-bfca-fc637ef6b251")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

----------------------------------------------------------------------------------------------------
  Resources.Designer.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sandbox.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Sandbox.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        internal static System.Drawing.Bitmap Copy {
            get {
                object obj = ResourceManager.GetObject("Copy", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap Copy1 {
            get {
                object obj = ResourceManager.GetObject("Copy1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}

----------------------------------------------------------------------------------------------------
  Resources.resx
----------------------------------------------------------------------------------------------------
  Settings.Designer.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sandbox.Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}

----------------------------------------------------------------------------------------------------
  Settings.settings
----------------------------------------------------------------------------------------------------

 >Resources
  Copy.png
  Copy1.png

 >Settings
  >Controls
----------------------------------------------------------------------------------------------------
   UIFileNameEditor.cs
using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using System.ComponentModel;
using System.Drawing.Design;
using System.IO;

namespace Sandbox.Editor
{
    public class UIFileNameEditor : UITypeEditor
    {
        public override UITypeEditorEditStyle GetEditStyle(
            ITypeDescriptorContext context)
        {
            if (context != null)
                return UITypeEditorEditStyle.Modal;

            return UITypeEditorEditStyle.None;
        }

        [RefreshProperties(RefreshProperties.All)]
        public override object EditValue(ITypeDescriptorContext context,
            IServiceProvider provider, object value)
        {
            FileDialog fd;

            if (context == null || provider == null || context.Instance == null)
                return base.EditValue(provider, value);

            fd = new OpenFileDialog();
            fd.CheckFileExists = true;
            fd.CheckPathExists = true;
            fd.Title = "Select Filename";
            fd.FileName = (value as string);
            fd.Filter = "All Files (*.*)|*.*";

            if (fd.ShowDialog() == DialogResult.OK)
            {
                if (File.Exists(fd.FileName))
                {
                    value = fd.FileName;
                }
            }

            return value;
        }
    }
}

----------------------------------------------------------------------------------------------------
   UIFolderNameEditor.cs
using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using System.ComponentModel;
using System.Drawing.Design;
using System.IO;

namespace Sandbox.Editor
{
    public class UIFolderNameEditor : UITypeEditor
    {
        public override UITypeEditorEditStyle GetEditStyle(
            ITypeDescriptorContext context)
        {
            if (context != null)
                return UITypeEditorEditStyle.Modal;

            return UITypeEditorEditStyle.None;
        }

        [RefreshProperties(RefreshProperties.All)]
        public override object EditValue(ITypeDescriptorContext context,
            IServiceProvider provider, object value)
        {
            FolderBrowserDialog fd;

            if (context == null || provider == null || context.Instance == null)
                return base.EditValue(provider, value);

            fd = new FolderBrowserDialog();
            fd.ShowNewFolderButton = false;
            if (fd.ShowDialog() == DialogResult.OK)
            {
                if (Directory.Exists(fd.SelectedPath))
                {
                    value = fd.SelectedPath + "\\";
                }
            }

            return value;
        }
    }
}

----------------------------------------------------------------------------------------------------
  Settings.cs
using System;
using System.Text;
using System.IO;
using System.ComponentModel;
using System.Reflection;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Drawing.Design;
using Sandbox.Editor;

namespace Sandbox
{

    public abstract class ISettings
    {

        public virtual void Read(BinaryReader br)
        {
            //For each property lets get the value and write it
            foreach (PropertyInfo pi in this.GetType().GetProperties(
                BindingFlags.Public | BindingFlags.Instance))
            {
                pi.SetValue(this, ReadValue(br, pi.PropertyType), null);
            }
        }

        public virtual void Write(BinaryWriter bw)
        {
            //For each property lets get the value and write it
            foreach (PropertyInfo pi in this.GetType().GetProperties(
                BindingFlags.Public | BindingFlags.Instance))
            {
                WriteValue(bw, pi.GetValue(this, null));
            }
        }

        private object ReadValue(BinaryReader br, Type type)
        {
            if (type == typeof(int))
                return br.ReadInt32();
            else if (type == typeof(bool))
                return br.ReadBoolean();
            else if (type == typeof(string))
                return br.ReadString();
            else if (type.IsEnum)
            {
                Type t = Enum.GetUnderlyingType(type);
                if (t == typeof(byte))
                    return br.ReadByte();
                else if (t == typeof(short))
                    return br.ReadInt16();
                else if (t == typeof(int))
                    return br.ReadInt32();
                else if (t == typeof(long))
                    return br.ReadInt64();
                else
                {
                    MessageBox.Show("Unable to read this enum type! Type: " + t.ToString());
                }
            }
            else if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(ISettingList<>))
            {
                object settingList = Activator.CreateInstance(type, new object[] { });
                settingList.GetType().GetMethod("Read").Invoke(settingList, new object[] { br });
                return settingList;
            }
            else
                MessageBox.Show("Cannot read type " + type.ToString());

            return null;
        }

        private void WriteValue(BinaryWriter bw, object value)
        {
            Type type = value.GetType();

            if (type == typeof(int))
                bw.Write((int)value);
            else if (type == typeof(bool))
                bw.Write((bool)value);
            else if (type == typeof(string))
                bw.Write((string)value);
            else if (type.IsEnum)
            {
                Type t = Enum.GetUnderlyingType(type);
                if (t == typeof(byte))
                    bw.Write((byte)value);
                else if (t == typeof(short))
                    bw.Write((short)value);
                else if (t == typeof(int))
                    bw.Write((int)value);
                else if (t == typeof(long))
                    bw.Write((long)value);
                else
                {
                    MessageBox.Show("Unable to write this enum type! Type: " + t.ToString());
                }
            }
            else if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(ISettingList<>))
            {
                MethodInfo mi = type.GetMethod("Write");
                mi.Invoke(value, new object[] { bw });
            }
            else
                MessageBox.Show("Cannot write type " + type);
        }
    }

    public class ISettingList<T> : List<T> where T : ISettings
    {
        public void Read(BinaryReader br)
        {
            int count = br.ReadInt32();
            for (int x = 0; x < count; x++)
            {
                T setting = (T)Activator.CreateInstance(typeof(T));
                setting.Read(br);
                Add(setting);
            }
        }

        public void Write(BinaryWriter bw)
        {
            bw.Write(this.Count);
            for (int x = 0; x < this.Count; x++)
                this[x].Write(bw);
        }
    }

    public class RecentFiles : ISettings
    {
        private string filePath;
        [Category("General Settings"),
        Description("Recent File Path"),
        Editor(typeof(UIFileNameEditor), typeof(UITypeEditor))]
        public string FilePath
        {
            get { return filePath; }
            set { filePath = value; }
        }

        public ToolStripMenuItem MenuItem;
    }

    public class Settings : ISettings
    {

        //This is our settings version we will increase if we add more settings
        public const double SettingsVersion = 0.01;

        private string settingsAuthor;
        [Category("General Settings"),
        Description("User that created this settings file"),
        ReadOnly(true)]
        public string SettingsAuthor
        {
            get { return settingsAuthor; }
            set { settingsAuthor = value; }
        }

        /*private ISettingList<RecentFiles> recentFiles = new ISettingList<RecentFiles>();
        [Category("General Settings"),
        Description("Collection of recent files")]
        public ISettingList<RecentFiles> RecentFiles
        {
            get { return recentFiles; }
            set { recentFiles = value; }
        }
        */
        private string mapFolder = "";
        [Category("General Settings"),
        Description("Location of the maps folder containg your Halo 3 Maps"),
        Editor(typeof(UIFolderNameEditor), typeof(UITypeEditor))]
        public string MapFolder
        {
            get { return mapFolder; }
            set { mapFolder = value; }
        }        
        /*
        private bool loadMapInfo = true;
        [Category("General Settings"),
        Description("Load corresponding map info (requires the info folder inside the maps directory)")]
        public bool LoadMapInfo
        {
            get { return loadMapInfo; }
            set
            {
                loadMapInfo = value;
                if (!loadMapInfo)
                    loadMapImage = false;
            }
        }

        private bool loadMapImage = true;
        [Category("General Settings"),
        Description("Load corresponding map image (requires the images folder inside the maps directory and LoadMapInfo to be enabled)")]
        public bool LoadMapImage
        {
            get
            {
                if (!loadMapInfo)
                    loadMapImage = false;
                return loadMapImage;
            }
            set
            {
                if (!loadMapInfo)
                    loadMapImage = false;
                loadMapImage = value;
            }
        }

        private bool autoCheckForUpdates = true;
        [Category("Program Update Settings"),
        Description("Automatically check for updates")]
        public bool AutoCheckForUpdates
        {
            get
            {
                if (!autoCheckForUpdates)
                    autoCheckForUpdates = false;
                return autoCheckForUpdates;
            }
            set
            {
                if (!autoCheckForUpdates)
                    autoCheckForUpdates = false;
                autoCheckForUpdates = value;
            }
        }

        public enum WhenToCheck : byte
        {
            Day = 0,
            Week = 1,
            Month = 2,
            Year = 3,
            Startup = 4,
        }

        private WhenToCheck checkEvery = WhenToCheck.Week;
        [Category("Program Update Settings"),
        Description("From this date on check every...(Auto Check Updates must be enabled to use this feature!")]
        public WhenToCheck CheckEvery
        {
            get
            {
                return checkEvery;
            }
            set
            {
                checkEvery = value;
            }
        }

        private string lastCheckedOn = DateTime.Now.ToString();
        [Category("Program Update Settings"),
        Description("Last time that a update check was preformed")]
        public string LastCheckedOn
        {
            get
            {
                return lastCheckedOn;
            }
            set
            {
                lastCheckedOn = value;
            }
        }

        private bool useSkin = false;
        [Category("Skin Settings"),
        Description("Use custom skin file")]
        public bool UseSkin
        {
            get
            {
                if (!useSkin)
                    useSkin = false;
                return useSkin;
            }
            set
            {
                if (!useSkin)
                    useSkin = false;
                useSkin = value;
            }
        }


        private string skinFile = "";
        [Category("Skin Settings"),
        Description("Location of the skin you would like to use"),
        Editor(typeof(UIFileNameEditor), typeof(UITypeEditor))]
        public string SkinFile
        {
            get { return skinFile; }
            set { skinFile = value; }
        }

        private bool showTipsAtStartup = true;
        [Category("Other"),
        Description("Do you want tips to be diplayed at startup")]
        public bool ShowTipsAtStartup
        {
            get
            {
                if (!showTipsAtStartup)
                    showTipsAtStartup = false;
                return showTipsAtStartup;
            }
            set
            {
                if (!showTipsAtStartup)
                    showTipsAtStartup = false;
                showTipsAtStartup = value;
            }
        }

        private string profileID = "";
        [Category("Device"),
        Description("ID of your Xbox 360 Profile")]
        public string ProfileID
        {
            get
            {
                return profileID;
            }
            set
            {
                profileID = value;
            }
        }
        */
    }
    public static class AppSettings
    {       

        //Our Settings
        private static Settings settings = new Settings();
        public static Settings Settings
        {
            get { return settings; }
        }

        //settings location
        public static string settingsDirectory = "";
        public static string settingsName = "\\AppSettings.dat";

        public static void SaveSettings()
        {
            //Create a settings file
            FileStream fs = new FileStream(settingsDirectory + settingsName,
                FileMode.Create, FileAccess.Write);
            BinaryWriter bw = new BinaryWriter(fs);

            //Write our settings version
            bw.Write(Settings.SettingsVersion);

            //Set the author of this settings
            settings.SettingsAuthor = SystemInformation.UserName;

            //Write our settings
            settings.Write(bw);

            //Close the file
            fs.Close();
        }

        public static void LoadSettings()
        {
            //Check if theres a settings file, if not then write it
            if (!File.Exists(settingsDirectory + settingsName))
                SaveSettings();

            //Open a settings file
            FileStream fs = new FileStream(settingsDirectory + settingsName,
                FileMode.Open, FileAccess.Read);
            BinaryReader br = new BinaryReader(fs);

            //Read the settings version and check if it matches
            if (Settings.SettingsVersion != br.ReadDouble())
            {
                //Close the settings and stop
                fs.Close();

                MessageBox.Show("You are using a different version of settings. Your settings will be cleared to prevent problems.",
                    "Different settings Ver.", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                //Delete the settings file and create a new class and file
                File.Delete(settingsDirectory + settingsName);
                settings = new Settings();
                SaveSettings();

                //Now just return
                return;
            }

            //read our settings
            settings.Read(br);

            //close the file
            fs.Close();

            //Find out if we are the author of this settings file
            if (settings.SettingsAuthor != SystemInformation.UserName)
            {
                DialogResult dr = MessageBox.Show("The settings file indicates that you are not user that created this Settings File. Would you like to start with a fresh Settings File?",
                      "Hmmm...", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (dr == DialogResult.Yes)
                {
                    //Delete the settings file and create a new class and file
                    File.Delete(settingsDirectory + settingsName);
                    settings = new Settings();
                    SaveSettings();
                }
                else
                {
                    //They don't want to create a new one, so lets just save it again
                    //this will change the author to them
                    SaveSettings();
                }
            }
        }

        public static void ClearSettings()
        {
            //Reset the settings data
            settings = new Settings();

            //Now Save them
            SaveSettings();
        }

        public static void DeleteSettings()
        {
            //Check if theres a settings file, then delete it
            if (File.Exists(settingsDirectory + settingsName))
                File.Delete(settingsDirectory + settingsName);
        }

    }

}

----------------------------------------------------------------------------------------------------

 >Usermap
----------------------------------------------------------------------------------------------------
  H3Usermap.cs (Error with Pitch/Yall/Roll) (Object is Reset to default spawn face position)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Sandbox.Data;
using Sandbox.IO;
using Sandbox.Forms;
using System.ComponentModel;
using System.Xml.Serialization;

namespace Sandbox.Usermap
{
    public class H3Usermap
    {
        private EndianIO io;
        public Header header;
        public UnnamedBlock1 unamedBlock1;
        public PlacementBlock[] placementBlocks;
        public TagIndexEntry[] tagIndex;

        public int baseObjectCount;

        public H3Usermap() { }

        public H3Usermap(string filepath)
        {
            io = new EndianIO(filepath, EndianType.BigEndian);
            io.Open();
        }
        /// <summary>
        /// Closes currently open usermap.
        /// </summary>
        public void Close()
        {
            io.Close();
        }
        /// <summary>
        /// Reads usermap into memory
        /// </summary>
        /// <returns>Error code</returns>
        public int Read()
        {
            try
            {
                //Start at beggining of file.
                io.In.BaseStream.Position = 0;
                //Read the file type string.
                if (new string(io.In.ReadChars(4)) == "CON ")
                    //Returns error code 1:
                    // Usermap must be extrcted from container.
                    return 1; 

                //Move past blf_ and chdr headers.
                io.In.BaseStream.Position = 312;

                //Read file header string.
                if (new string(io.In.ReadChars(4)) != "mapv")
                    //Returns error code 2:
                    // This is not a usermap file.
                    return 2;

                //Move back to the header.
                io.In.BaseStream.Position = 312;
                header = new Header(); //Create new instance.
                header.Read(io.In); //Read header.  

                unamedBlock1 = new UnnamedBlock1();
                unamedBlock1.Read(io.In);

                //Move to start of placement blocks.
                io.In.BaseStream.Position = 632;
                //Create new array to hold blocks.
                int objCount = 0;
                placementBlocks = new PlacementBlock[640];
                for (int i = 0; i < 640; i++) //Loop through blocks.
                {
                    placementBlocks[i] = new PlacementBlock(); //Creat new instance.
                    placementBlocks[i].Read(io.In); //Read block.
                    /*if (placementBlocks[i].TagIndex >= 25 && placementBlocks[i].TagIndex <= 28)
                        placementBlocks[i].Z += 1;*/
                    if (placementBlocks[i].BlockType != PlacementBlock.blockType.NULL)
                        objCount++;
                }
                baseObjectCount = unamedBlock1.Spawned_Object_Count - objCount;
                //Move to start iof tag index.
                io.In.BaseStream.Position = 54420;
                //Creat new array to hold index entrys.
                tagIndex = new TagIndexEntry[256];
                for (int i = 0; i < 256; i++) //Loop through entrys.
                {
                    tagIndex[i] = new TagIndexEntry(); //Create new instance.
                    tagIndex[i].Read(io.In); //Read entry.
                } 
            }
            catch
            {
                //Returns error code 3:
                // An error was encountered reading usermap.
                return 3;
            }

            //Returns error code 0:
            // Success.
            return 0;
        }
        /// <summary>
        /// Write usermap from memory to file
        /// </summary>
        /// <returns>Error code</returns>
        public int Write()
        {
            try
            {
                io.Out.BaseStream.Position = 312;
                header.Write(io.Out);

                unamedBlock1.Write(io.Out);

                io.Out.BaseStream.Position = 632;
                for (int i = 0; i < 640; i++)
                {
                    placementBlocks[i].Write(io.Out);
                }                

                io.Out.BaseStream.Position = 54420;
                for (int i = 0; i < 256; i++)
                {
                    tagIndex[i].Write(io.Out);
                }
            }
            catch
            {
                return 1;
            }

            return 0;
        }

        public int FindPlacementBlock(int Ident, int index)
        {
            for (int i = index; i < 640; i++)
            {
                int tagIndex = GlobalVariables.Usermap.placementBlocks[i].TagIndex;
                if ((tagIndex != -1) && (GlobalVariables.Usermap.tagIndex[tagIndex].ident == Ident))
                {
                    return i;
                }
            }
            return -1;
        }
        /// <summary>
        /// Reads, writes, and allows editing of the usermap header..
        /// </summary>
        public class Header : Chunk
        {
            //Structure of usermap header
            #region Structure
            [Size(4)]
            public char[] MapV;
            public int Size;
            public short Unknown_8;
            public short Unknown_10;
            [Size(12)]
            public byte[] Unknown_12;
            [String(StringType.Unicode, 16)]
            public string varientName;
            [String(128)]
            public string varientDescription;
            [String(16)]
            public string varientAuthor;
            public int Unknown_200;
            public int Unknown_204;
            public int Unknown_208;
            public int Unknown_212;
            public int Unknown_216;
            public int Entry_Size;
            public int CON_File_Name_1;
            public int CON_FIle_Name_2;
            public int Unknown_232;
            public int NULL;
            public int varientMapId;
            public int Unknown_244;
            public int NULL_2;
            public short NULL_3;
            [Size(10)]
            public byte[] Unknown_254;
            #endregion
            //Property's for values to allow editing of later.
            #region Properties
            [Category("Map Info"), System.ComponentModel.Description("Author of this usermap")]
            public string Author
            {
                get { return varientAuthor; }
                set { varientAuthor = OnAuthorChange(value); }
            }
            [Category("Map Info"), System.ComponentModel.Description("Name of this usermap.")]
            public string Name
            {
                get { return varientName; }
                set { varientName = OnNameChange(value); }
            }
            [Category("Map Info"), System.ComponentModel.Description("Desscription of this usermap.")]
            public string Description
            {
                get { return varientDescription; }
                set { varientDescription = OnDescriptionChange(value); }
            }
            [Category("Map Info"), System.ComponentModel.Description("What map is this usermap for.")]
            public Misc.MapID MapId
            {
                get { return (Misc.MapID)varientMapId; }
                set { varientMapId = (int)value; }
            }
            #endregion
            //Methods for perfoming operations on placement blocks.
            #region Methods
            protected string OnAuthorChange(string author)
            {
                if (author.Length <= 16)
                    return author;
                else
                    System.Windows.Forms.MessageBox.Show("Author name must not be greater than 16 characters.",
                        "Too long.", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Error);
                return varientAuthor;
            }
            protected string OnNameChange(string name)
            {
                if (name.Length <= 16)
                    return name;
                else
                    System.Windows.Forms.MessageBox.Show("Map name must not be greater than 16 characters.",
                        "Too long.", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Error);
                return name;
            }
            protected string OnDescriptionChange(string description)
            {
                if (description.Length <= 128)
                    return description;
                else
                    System.Windows.Forms.MessageBox.Show("Description name must not be greater than 128 characters.",
                        "Too long.", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Error);
                return varientDescription;
            }
            #endregion
        }
        /// <summary>
        /// Reads, writes, and allows editing of unknown block 1
        /// </summary>
        public class UnnamedBlock1 : Chunk //56 Bytes
        {
            //Structure of unamed block 1
            #region Structure
            public short Unknown;
            public short Unknown_2;
            public byte Unknown_4;
            public byte Spawned_Object_Count;
            public short Unknown_6;
            public int Map_ID;
            public float World_Bounds_X_Min;
            public float World_Bounds_X_Max;
            public float World_Bounds_Y_Min;
            public float World_Bounds_Y_Max;
            public float World_Bounds_Z_Min;
            public float World_Bounds_Z_Max;
            public int Unknown_36;
            public float Maximum_Budget;
            public float Current_Budget;
            public int Unknown_48;
            public int Unknown_52;
            #endregion
        }
        /// <summary>
        /// Read, writes, and allows editing of individual placement blocks.
        /// </summary>        
        public class PlacementBlock : Chunk
        {
            //Structure of placement block.
            #region Structure
            public short Block_Type; //0
            [Size(10)]
            public byte[] Unused_4; //4
            public int Tags_Index; //12
            public float posX; //16
            public float posY; //20
            public float posZ; //24
            public float posYaw; //28
            public float posPitch; //32
            public float posRoll; //36
            public float Unknown_Rot_1; //40
            public float Unknown_Rot_2; //44
            public float Unknown_Rot_3; //48
            [Size(8)]
            public byte[] Unused_52; //52
            public byte Unknown_60; //60 
            public byte Unknown_61; //61   
            public byte flags; //62
            public byte team; //63
            public byte spareClips; //64
            public byte respawnTime; //65
            public short Unknown66; //66
            [Size(16)]
            public byte[] Unused_68; //68
            #endregion
            //Defines placement block types
            public enum blockType : short
            {
                Player_Spawn = 9,
                Reserved = 41,
                Added = 131,
                Original = 137,
                Edited = 139,
                NULL = 0,
            }
            //Property's for values to allow editing of later.
            #region Properties
            [Browsable(true)]
            [Category("Block Type"), System.ComponentModel.Description("What kind of placement block is this.")]
            public blockType BlockType
            {
                get { return (blockType)Block_Type; }
                set { Block_Type = (short)value; }
            }

            [Category("Spawn Location"), System.ComponentModel.Description("X co-ordinat object will spawn at.")]
            public float X
            {
                get { return posX; }
                set { posX = value; }
            }

            [Category("Spawn Location"), System.ComponentModel.Description("Y co-ordinat object will spawn at.")]
            public float Y
            {
                get { return posY; }
                set { posY = value; }
            }

            [Category("Spawn Location"), System.ComponentModel.Description("Z co-ordinat object will spawn at.")]
            public float Z
            {
                get { return posZ; }
                set { posZ = value; }
            }

            [Category("Object Rotation"), System.ComponentModel.Description("Y axis rotation of object")]
            public float Yaw
            {
                get { return posYaw; }
                set { posYaw = value; }
            }

            [Category("Object Rotation"), System.ComponentModel.Description("P axis rotation of object")]
            public float Pitch
            {
                get { return posPitch; }
                set { posPitch = value; }
            }

            [Category("Object Rotation"), System.ComponentModel.Description("R axis rotation of object")]
            public float Roll
            {
                get { return posRoll; }
                set { posRoll = value; }
            }

            [Category("Respawn Settings")]
            public byte Flags
            {
                get { return flags; }
                set { flags = value; }
            }

            [Category("Respawn Settings"), System.ComponentModel.Description("Team this object belongs to.")]
            public byte Team
            {
                get { return team; }
                set { team = value; }
            }

            [Category("Respawn Settings"), System.ComponentModel.Description("Amount of spare clips does this object has.")]
            public byte SpareClips
            {
                get { return spareClips; }
                set { spareClips = value; }
            }

            [Category("Respawn Settings"), System.ComponentModel.Description("How long this object takes to respawn.")]
            public byte RespawnTime
            {
                get { return respawnTime; }
                set { respawnTime = value; }
            }

            [Category("Tag Reference"), System.ComponentModel.Description("Index of object to spawn in tag index.")]
            public int TagIndex
            {
                get { return Tags_Index; }
                set { Tags_Index = OnTagIndexChanged(value); }
            }

            #endregion
            //Methods for perfoming operations on placement blocks.
            #region Methods
            /// <summary>
            /// Loads placement block with NULL values.
            /// </summary>
            public void LoadNull()
            {
                base.SetFields();

                Block_Type = 0;
                Unused_4 = new byte[] { 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
                Tags_Index = -1;
                posX = 0;
                posY = 0;
                posZ = 0;
                posYaw = 0;
                posPitch = 0;
                posRoll = 0;
                Unknown_Rot_1 = 0;
                Unknown_Rot_2 = 0;
                Unknown_Rot_3 = 0;
                Unused_52 = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
                Unknown_60 = 0;
                Unknown_61 = 0;   
                flags = 12;
                team = 9;
                spareClips = 0;
                respawnTime = 0;
                Unknown66 = 0;
                Unused_68 = new byte[] { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                    0x00,0x00,0x00,0x00};
            }

            protected int OnTagIndexChanged(int index)
            {
                if (index >= 0 && index <= 254)
                    return index; //If valid return new index
                else
                    System.Windows.Forms.MessageBox.Show("Index must be between 0 and 254.", "Invalid index entered.", 
                        System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Error); //Tell user index entered was invalid.
                return Tags_Index; //Return original index number
            }
            #endregion
        }
        /// <summary>
        /// Read, writes, and allows editing of individual tag entrys.
        /// </summary>
        public class TagIndexEntry : Chunk
        {
            //Structure of tag index entrys
            #region Structure
            public int ident;
            public byte run_Time_Minimun;
            public byte run_Time_Maximun;
            public byte number_On_Map;
            public byte design_Time_Maximun;
            public float total_Cost;
            #endregion
            //Property's for values to allow editing of later.
            #region Properties
            [Category("Object Info"), System.ComponentModel.Description("What object will spawn."),
        Editor(typeof(Sandbox.Editor.UIIdentSwapper), typeof(System.Drawing.Design.UITypeEditor))]
            public string Ident
            {
                get { return GlobalVariables.Plugin.GetTagNameFromID(ident); }
                set { ident = GlobalVariables.Plugin.GetIDFromTagName(value); }                    
            }
            
            [Category("Spawn Rules"), System.ComponentModel.Description("Minimun number of this object that can spawn at one time ingame")]
            public byte RunTimeMinimun
            {
                get { return run_Time_Minimun; }
                set { run_Time_Minimun = value; }
            }
            [Category("Spawn Rules"), System.ComponentModel.Description("Maximun number of this object that can spawn at one time ingame.")]
            public byte RunTimeMaximun
            {
                get { return run_Time_Maximun; }
                set { run_Time_Maximun = value; }
            }
            [Category("Spawn Rules"), System.ComponentModel.Description("Number of this item on the map.")]
            public byte NumberOnMap
            {
                get { return number_On_Map; }
                set { number_On_Map = value; }
            }
            [Category("Spawn Rules"), System.ComponentModel.Description("Maximun number of this object that can be placed at one time while creating map.")]
            public byte DesignTimeMaximun
            {
                get { return design_Time_Maximun; }
                set { design_Time_Maximun = value; }
            }
            [Category("Object Info"), System.ComponentModel.Description("How much per object does it cost to spawn.")]
            public float TotalCost
            {
                get { return total_Cost; }
                set { total_Cost = value; }
            }
            #endregion
            //Methods for perfoming operations on index entrys
            #region Methods
            /// <summary>
            /// Loads placement block with NULL values.
            /// </summary>
            public void LoadNull()
            {
                base.SetFields();

                ident = -1;
                run_Time_Maximun = 0;
                run_Time_Minimun = 0;
                number_On_Map = 0;
                design_Time_Maximun = 255;
                total_Cost = -1;
            }
            #endregion
        }
    }
}

----------------------------------------------------------------------------------------------------
  MapIDs.cs (Important Changes Made)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Sandbox.MapV
{
    public static class MapIDs
    {
        public static string GetMapName(int MapID)
        {
            switch (MapID)
            {
                case 30: return "zanzibar.map";
*               case 31: return "s3d_turf.map";
                case 300: return "construct.map";
                case 310: return "deadlock.map";
                case 320: return "guardian.map";
                case 330: return "isolation.map";
                case 340: return "riverworld.map";
                case 350: return "salvation.map";
                case 360: return "snowbound.map";
                case 380: return "chill.map";
                case 390: return "cyberdyne.map";
                case 400: return "shrine.map";
                case 410: return "bunkerworld.map";
*               case 440: return "docks.map";
*               case 470: return "sidewinder.map";
                case 480: return "warehouse.map";
*               case 490: return "descent.map";
*               case 500: return "spacecamp.map";
*               case 520: return "lockout.map";
                case 580: return "armory.map";
*               case 590: return "ghosttown.map";
*               case 600: return "chillout.map";
*               case 703: return "s3d_edge.map";
*               case 706: return "s3d_waterfall.map";
*               case 720: return "midship.map";
*               case 730: return "sandbox.map";
*               case 740: return "fortress.map";
            }

            return null;
        }
    }
}

----------------------------------------------------------------------------------------------------
 Misc.sc (Important Changes Made)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;
using System.Windows.Forms;
using System.IO;
using Sandbox.Usermap;
using Sandbox.Data;
using System.Xml.Serialization;
using System.Xml;

namespace Sandbox
{
    /// <summary>
    /// Random functions that dont fit into any other class
    /// </summary>
    public static class Misc
    {
        /// <summary>
        /// Defines map ids for each map
        /// </summary>
        public enum MapID : int
        {
*           zanzibar = 30,
*           s3d_turf = 31,
*           construct = 300,
*           deadlock = 310,
*           guardian = 320,
*           isolation = 330,
*           riverworld = 340,
*           salvation = 350,
*           snowbound = 360,
*           chill = 380,
*           cyberdyne = 390,
*           shrine = 400,
*           bunkerworld = 410,
*           docks = 440,
*           sidewinder = 470,
*           warehouse = 480,
*           descent = 490,
*           spacecamp = 500,
*           lockout = 520,
*           armory = 580,
*           ghosttown = 590,
*           chillout = 600,
*           s3d_edge = 703,
*           s3d_waterfall = 706,
*           midship = 720,
*           sandbox = 730,
*           fortress = 740,
        }
        /// <summary>
        /// Uses the map id to retrieve its plugin name.
        /// </summary>
        /// <param name="mapId">Id of map</param>
        /// <returns>Map Plugin Name</returns>
        public static string GetPluginName(int mapId)
        {
            switch (mapId)
            {
                case 30: return Application.StartupPath + "\\Plugins\\zanzibar.xml";
*               case 31: return Application.StartupPath + "\\Plugins\\s3d_turf.xml";
                case 300: return Application.StartupPath + "\\Plugins\\construct.xml";
*               case 310: return Application.StartupPath + "\\Plugins\\deadlock.xml";
                case 320: return Application.StartupPath + "\\Plugins\\guardian.xml";
                case 330: return Application.StartupPath + "\\Plugins\\isolation.xml";
                case 340: return Application.StartupPath + "\\Plugins\\riverworld.xml";
                case 350: return Application.StartupPath + "\\Plugins\\salvation.xml";
                case 360: return Application.StartupPath + "\\Plugins\\snowbound.xml";
                case 380: return Application.StartupPath + "\\Plugins\\chill.xml";
                case 390: return Application.StartupPath + "\\Plugins\\cyberdyne.xml";
                case 400: return Application.StartupPath + "\\Plugins\\shrine.xml";
                case 410: return Application.StartupPath + "\\Plugins\\bunkerworld.xml";
*               case 440: return Application.StartupPath + "\\Plugins\\docks.xml";
                case 470: return Application.StartupPath + "\\Plugins\\sidewinder.xml";
                case 480: return Application.StartupPath + "\\Plugins\\warehouse.xml";
*               case 490: return Application.StartupPath + "\\Plugins\\descent.xml";
*               case 500: return Application.StartupPath + "\\Plugins\\spacecamp.xml";
                case 520: return Application.StartupPath + "\\Plugins\\lockout.xml";
                case 580: return Application.StartupPath + "\\Plugins\\armory.xml";
                case 590: return Application.StartupPath + "\\Plugins\\ghosttown.xml";
                case 600: return Application.StartupPath + "\\Plugins\\chillout.xml";
*               case 703: return Application.StartupPath + "\\Plugins\\s3d_edge.xml";
*               case 706: return Application.StartupPath + "\\Plugins\\s3d_waterfall.xml";
*               case 720: return Application.StartupPath + "\\Plugins\\midship.xml";
*               case 730: return Application.StartupPath + "\\Plugins\\sandbox.xml";
*               case 740: return Application.StartupPath + "\\Plugins\\fortress.xml";
            }

            return null;
        }
        /// <summary>
        /// Retrieve a bitmap for a tag from the images folder
        ///  using the tags id
        /// </summary>
        /// <param name="id">Id of tah</param>
        /// <returns>Bitmap Image</returns>
        public static Bitmap GetImagesFromID(int id)
        {
            //Make sure ID is not null
            if (id != -1)
            {
                //Make the proper path string
                string path = Application.StartupPath + "\\Images\\" +
                    GlobalVariables.Plugin.GetTagNameFromID(id).Replace('\\', '_') + ".png";
                //Check if a file exist at that location
                if (File.Exists(path))
                    //If file exist return image
                    return new Bitmap(path);

            }
            //If Id was null or file didnt exist
            // return default bitmap.
            return new Bitmap(Application.StartupPath + "\\Images\\NoImage.png");
        }
    }
}

----------------------------------------------------------------------------------------------------
 Program.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using Sandbox.Forms;

namespace Sandbox
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());            
        }
    }
}

----------------------------------------------------------------------------------------------------
 Sandbox.csproj
----------------------------------------------------------------------------------------------------
 Symbol-Construction.iso